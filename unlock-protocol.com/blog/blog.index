{"items":[{"title":"Locking Glitch","authorName":"Julien Genestoux","publishDate":"March 17, 2020","description":"Glitch is a modern web development tool which lets you build fast, full-stack web apps in your browser. Here's how to add locks to these applications!","image":"/static/images/blog/locking-glitch/glitch.png","slug":"locking-glitch","content":"\n\n[Glitch](https://glitch.com/) is a modern web development tool wich lets you build fast, full-stack web apps in your browser. It's not only a developer tool which can prove very useful for prototyping applications very fast, but can also be used to actually host these applications.\n\nIn this article, I will show you how to easily add a lock to a Glitch application to monetize it! First, [try the application](https://unlock-example.glitch.me/), or check the embedded version below! You can click on the Fishes in the top right corner to <em>View Source</em> or <em>Remix on Glitch</em>, if you want to edit the code (it's a great way to start building your own application!).\n\n<div class=\"glitch-embed-wrap\" style=\"height: 486px; width: 100%; margin-bottom: 50px\">\n  <iframe\n    allow=\"geolocation; microphone; camera; midi; encrypted-media\"\n    src=\"https://glitch.com/embed/#!/embed/unlock-example?previewSize=100&previewFirst=true&sidebarCollapsed=true\"\n    alt=\"unlock-example on Glitch\"\n    style=\"height: 100%; width: 100%; border: 0;\">\n  </iframe>\n</div>\n\nLet's start by clicking on the **View Source** button. Use the little ▶️ button in the top right corner to view the list of files. Our application is very trivial and includes the following files `index.html`, `index.js`, `style.css` and `unlock.js`.\n\n# Index.html\n\nThe `index.html` file includes the markup which is displayed by the web browser, as well as \"loads\" the other relevant files, such as the styles from the `style.css` file and the JavaScript code from both `index.js` and `unlock.js`.\n\nThe markup on the page includes 3 important elements. They all have the class `unlock-protocol`. We will use this class in our script to identify what needs to be shown or hidden based on the status of the visitor (member or not!).\n\n1. The first paragraph with the class `loading` acts as a placeholder and it will only be visible while the rest of the page is being loaded.\n\n```\n<p class=\"unlock-protocol loading\">\n  Loading!\n</p>\n```\n\n2. The second paragraph is hidden by default (see `style=\"display:none\"`), and has the class `unlocked`. This one will be only shown when the visitor is a member.\n\n\n```\n<p class=\"unlock-protocol unlocked\" style=\"display:none\">\n  Thanks for being a member ;)\n</p>\n```\n\n3. The 3rd paragraph is also hidden by default, but this time it has the class `locked`, which means it will be shown when the visitor is not a member. That's in this paragraph that we will add a button for the user to purchase their membership, through the `unlockProtocol.loadCheckoutModal()` method.\n\n\n```\n<p class=\"unlock-protocol locked\" style=\"display:none\">\n  <button onclick=\"window.unlockProtocol.loadCheckoutModal()\">\n    Please, become a member now!\n  </button>\n</p>\n```\n\n# Unlock.js\n\nLet's now look at the `unlock.js` script. This script has several purposes:\n\n1. It loads the unlock paywall application\n\n```\n// Load Unlock\nvar js = document.createElement(\"script\")\nsc = document.getElementsByTagName(\"script\")[0]\njs.src=\"https://paywall.unlock-protocol.com/static/unlock.1.0.min.js\"\nsc.parentNode.insertBefore(js, sc)\n```\n\n2. It configures the behavior of the paywall application\n\n```\n// Configure Unlock\nvar unlockProtocolConfig = {\n  locks: {\n    '0xB0114bbDCe17e0AF91b2Be32916a1e236cf6034F': {\n    },\n  },\n  callToAction: {\n  }\n}\n```\n\n3. And finally, it handles the events to show or hide elements based on the state of the visitor. By default, it hides all elements with the `unlock-protocol` class, and just shows the ones which are relevant to the event which was emitted.\n\n```\n// Handle unlock events to hide/show element based on state\nwindow.addEventListener('unlockProtocol', function(e) {\n  var state = e.detail\n\n  document.querySelectorAll('.unlock-protocol').forEach((element) => {\n    element.style.display = 'none';\n  })\n  document.querySelectorAll(`.${state}`).forEach((element) => {\n    element.style.display = 'block';\n  })\n})\n```\n\nThat's it!\n\n# What are you building?\n\nUnlock should be a very small part of any application because it is just about _access control_. What your application grants to users is completely up to you! Here are a few applications which you might be interested in looking at:\n\n* A [chat room application](https://ethcc-chat.glitch.me/) where only members can participate! I built this application for [EthCC](https://ethcc.io/) to show how easy to re-use a locks used to sell tickets in a different context!\n* A [locked Typeform](https://locked-typeform.glitch.me/). Typeform is an application which lets you build surveys and forms. This example shows how you can build a way to collect information only from your members!\n\nWhat would you build? Please let us know in the comments!\n"},{"title":"The Access Control Primitive","authorName":"Julien Genestoux","publishDate":"March 10, 2020","description":"The web is an operating system. Unlock Protocol is its access control primitive","image":"/static/images/blog/first-lock/new-lock.jpg","slug":"access-control-primitive","content":"\n\n[Wikipedia says it best](https://en.wikipedia.org/wiki/Operating_system):\n\n> An operating system (OS) is system software that manages computer hardware, software resources, and provides common services for computer programs.\n\nAs the Coronavirus is bringing the physical world to a halt through a denial of service attack on healthcare systems, it's increasingly obvious that the _virtual_ layer that we've been building for the last 40 years is acting as an **operating system for mankind**. As a system, Internet provides the underlying architecture upon which we communicate, work, collaborate, teach, learn, commerce and even have feelings.\n\n## The Interet Operating System\n\nOperating Systems provide a set of primitives which are used by applications running on that same operating system. Internet is not different. On the internet, these primitives take the form of **Protocols**!\n\nFor example, your computer (or phone!) has an addressing primitive. Do you remember when people talked about your `C:\\` Drive? On the web, it's the job of the URL. The format of these URL is protocol which describes to web browsers how to access a file.\n\nAnother example is _identity_. Computers have \"accounts\". On the web, this identity layer is now mostly controlled by Google and Facebook... In the blockchain world, public-key cryptography provides that layer. On top of the identity layer, sits an authentication layer. On the web, this time, the [OAuth](https://en.wikipedia.org/wiki/OAuth) protocol enables internet users to login on a website with their identity from another website. It's a great experience because it reduces the need to create accounts (and remember passwords) on every single website.\n\nInternet is of course, powered by dozens of protocols. Do you know about `TCP`, `HTTP`, `FTP`, `XMPP`, `WebSub`, `IPFS`, `NTP`, `IMAP`, `DNS` or `Bitcoin`? What about `IRC`, `SSH`, `MQTT`, `DHCP`, `SIP`, `POP`, `SMTP`?... They all have a distinct purposes.\n\n# Access Control\n\nAs we've seen above *identity is a core primitive of any operating system*, including Internet. It is critical to another very important primitive called **Access Control**. _This primitive enforces which user gets access to what resources inside of the Operating System._\n\nFor example, on a computer or a server, when a user creates a file, they can determine which other user can access it. Each application has a set of users who can run it... etc.\n\n> On the internet, the access control layer is critical, because access control represents an opportunity for monetization, [away from attention](https://medium.com/unlock-protocol/the-end-of-the-ad-supported-web-d4d093fb462f).\n\nEach creator, whether they [compose music](http://phunkstatik.zplit.eth.link/), [record videos](https://chrisblec.com/CHAI/), [write content](https://bit.ly/the-defiant) or software should be able to decide the terms for access, including the price of a membership, the duration of a membership, or even the number of members!\n\nIt is already happening: Google, Facebook, Apple and Amazon **already own identities** and the logical next step is to own access control. Apple made the first move with the AppStore, and later, Apple Pay. Google follows very closely. As more and more people get online and purchase access to content or software, these 2 companies increasingly act as gatekeepers. Creators don't decide of the terms: Apple and Google do. It's pretty clear that Facebook and Amazon are pursuing similar strategies, the first by building Libra, a currency for the internet, and the second one by owning more and more of the internet's underlying architecture, including users' wallets.\n\nAt Unlock, we strongly believe that a _healthy web is one where creators are rewarded by their fans_, not through them. We also believe that the web needs to be decentralized to remain useful: permissionless innovation has been the main driver of progress and we do not want to accept a world where a few tech companies decide what content is \"worth\" being produced, distributed or even monetized!\n\n\n\n\n"},{"title":"How we use OpenZeppelin","subTitle":"Showcasing our usage of open-source tools.","authorName":"Nick Furfaro","publishDate":"February 24, 2020","description":"Openzeppelin provides the ethereum community an excellent assortment of reusable libraries and command-line tools. Here's how we use them at Unlock.","image":"/static/images/blog/zeplin.jpg","slug":"how-we-use-openzeppelin","content":"\n\n### What it is\n\nUnlock is a protocol which enables creators to monetize their content with a few lines of code in a fully decentralized way, enabling programmable access to resources. This could include a blog, a subset of software features, or an event.\n\nThe core of the protocol is built on ethereum, and is enabled by 2 primary smart contracts, `Unlock.sol` & `PublicLock.sol`.\n\n- `Unlock.sol` is the factory contract. it deploys locks for creators and is responsible for managing network-wide functionality such as granting discounts and tracking the GNP of the network. This contract is upgradeable.\n\n- `Publiclock.sol` is the lock contract. These are deployed by the factory when a creator creates a new lock. We don't actually deploy the full lock contract for each lock. This would be very heavy, as `PublicLock.sol` is a large contract. (To get an idea of the size, when flattened it's about 3,470 lines of code). Instead, we make use of eip-1167 (minimal proxies) to deploy lightweight proxy-clones for each lock. The logic for these clones is determined by a single deployed `PublicLock.sol` which acts as the template for all locks.\n\n### How we use OpenZeppelin\n\nWe make use of a number of the tools & libraries that OZ offers:\n\n#### Upgradeability\n\nAt Unlock, our approach to upgradeability has been to make the factory contract(`Unlock.sol`) upgradeable to enable us to continue to add and refine features. Since launching, we've had many requests from users to add support for new use-cases and without upgrades, this just wouldn't be feasible. However, the Lock contracts deployed from this factory are NOT upgradeable. This gives lock creators assurance that their lock is theirs forever, and can't be changed by anyone.\nWhile there's no shortage of debate over the very idea of upgradeable contracts in the industry, one thing is very clear; the Openzeppelin-SDK makes it super-easy to manage and track upgrades! We manage most contract deployments and upgrades of `Unlock.sol` with openzeppelin's cli and appreciate the way the \"network files\" (ie: `/.openzeppelin/mainnet.json`) help us to keep track of the deployed contract addresses, current implementations, etc. Also, the ability to deploy contracts and then query them or submit tx's easily all via the cli is nice, avoiding the need to jump back and forth between many different toolsets to achieve the same.\n\n#### Library\n\nWe use a number of openzeppelin's contracts from `@openzeppelin/upgrades/`, `@openzeppelin/contracts/`, and `@openzeppelin/contracts-ethereum-package/`. These include:\n\n- `Initializable.sol`\n- `IERC1820Registry.sol`\n- `ECDSA.sol`\n- `Address.sol`\n- `Ownable.sol`\n- `ERC165.sol`\n- `IERC721Enumerable.sol`\n- `IERC721Receiver.sol`\n- `SafeMath.sol`\n- `Roles.sol`\n- `IERC20.sol`\n- `SafeERC20.sol`\n\n#### Test-Helpers\n\nWe've only just started to use some of the OZ test-helpers, but the experience so far has been great. For those who haven't tried them, they make a lot of common, repetitive tasks in testing very straightforward, and I highly recommend at least checking them out.\n\n#### Access Control\n\nWe currently use `Ownable.sol` and the `onlyOwner` modifier extensively throughout our contracts. However, having realized some of the limitations/drawbacks of this approach, we've been re-evaluating our approach to access control and are migrating to a predominantly role-based approach using OZ's `Roles.sol`. At the moment it seems that the current approach to this topic is being revamped by OZ, so we're watching to see what emerges and will have to reassess whether it still meets our needs.\n\n### Links\n\nTo learn more or get in touch, feel free to reach out to the team, try out our dashboard on the rinkeby testnet, or just explore the code in our GitHub repo.\n\n- Unlock-Protocol: [unlock-protocol.com](https://unlock-protocol.com/)\n- Github: [github.com/unlock-protocol/unlock](https://github.com/unlock-protocol/unlock)\n- Test dashboard: [staging.unlock-protocol.com](https://staging.unlock-protocol.com/)\n- Docs: [docs.unlock-protocol.com](https://docs.unlock-protocol.com/)\n- Blog: [unlock-protocol.com/blog](https://unlock-protocol.com/blog/)\n- twitter [twitter.com/UnlockProtocol](https://twitter.com/UnlockProtocol)\n- telegram: [t.me/unlockprotocol](https://t.me/unlockprotocol)\n- email: hello@unlock-protocol.com\n"},{"title":"What I’m Excited About: Portability","subTitle":"Instead of ads following us around our access should.","authorName":"Sascha Mombartz","publishDate":"Feb 19, 2020","description":"Instead of ads following us around our access should.","image":"/static/images/blog/portability/hero.jpg","slug":"portability","content":"\n\n![Take it with you](/static/images/blog/portability/hero.jpg)\n\n\nYou’ve experienced this: You‘ve bought something (or just searched for it) and now you have ads for that or a similar item following you around. What’s happening is you have two services – the shop you bought from and the ad delivery network – that are talking to you but not each other, and that leads to a not so great user experience. \n\nA similar thing happens for subscriptions and memberships. A concrete example: I listen to The Daily, a NYTimes podcast, every day on Spotify. Annoyingly I have to listen to quite a lengthy segment that’s trying to convince me to subscribe to the Times – even though I’m a subscriber already.\n\nI can see a future where Spotify will check my ethereum wallet, see that I have the New York Times membership token and give me The Daily version for members without promotions. Maybe they will even create a version without ads and special content for long time or higher tier subscribers.\n\nIn that future I could take advantage of many other benefits and services based on my existing purchases and memberships. Event discounts for NYTimes or Spotify members? I just need to sign a message from my wallet that checks that my membership is valid without having to sign up or share any additional information. Bought the audio book on Amazon and the publisher offers the ebook for free on their site? Easy to verify your purchase, no need to login or share your Amazon data. You’re a New York WeWork member and are in Berlin? They can easily verify your membership and give you free or discounted access without having to look you up in their system. The blockchain let’s different services talk to each other, cross checking your memberships and purchases with minimal data sharing, if you allow it. Your purchase and membership tokens function as universal keys.\n\nWant to do something like this? So does Unlock – we’d love to do it together."},{"title":"Collecting Metadata for a Purchase","subTitle":"Connecting lock owners and key holders","authorName":"Christopher Nascone","publishDate":"February 14, 2020","description":"Lock owners can require information from key purchasers before the transaction is initiated.","image":"/static/images/blog/metadata-collection/Forms.jpg","slug":"metadata-collection","content":"\n\n# Meeting the Needs of Our Users\n\nOver the course of the past year, Unlock has powered [membership](/blog/tokenizing-memberships/) opportunities like [newsletter subscriptions](/blog/introducing-newsletter/), [event](/blog/ethwaterloo-tickets/) [tickets](/blog/ethcc-tickets/), and [ad-free experiences](/blog/forbes-in-the-news/). One thing we've heard from creators who own locks is that in some cases they need to gather information from key purchasers before they buy a key.\n\nFor example, a newsletter publisher may want to email updates to subscribers. We offered a way for newsletter publishers in particular to gather some information through our [newsletter subscription app](/blog/introducing-newsletter/), but there were some limitations to that approach. For starters, publishers could not host this experience within their own site. Further, they couldn't specify which information could be collected. For anyone who needed to collect more than just an email address (or ran something other than a newsletter), we needed another solution.\n\n# Broader Availability of Metadata Collection\n\nToday we're proud to announce an extension to our embeddable Paywall application which allows creators to specify a number of form fields which should be presented to the purchaser before the purchase transaction begins. The technology behind this is our [metadata system](https://docs.unlock-protocol.com/developers/metadata) which we've already used behind-the-scenes in a few places. If you're already familiar with our Paywall, you can learn how to add metadata to your existing configuration [here](https://docs.unlock-protocol.com/applications/paywall/advanced-paywall-configuration). For everyone else, the remainder of this post is a worked example.\n\n# Collecting Information From Purchasers\n\n## The Scenario\n\nConsider a blog that allows anyone to read published articles, but offers a perk for paying members: they get early access to articles before they are published in the open. One way to implement this is to collect an email address from paying members, which will be used to notify them of a new article and link them to a private page.\n\n## The Setup\n\nWe'll start with the recommended setup from our [getting started guide](https://docs.unlock-protocol.com/#configure-the-lock) with one addition: an array of metadata fields we'd like to collect.\n\n\n```\nvar unlockProtocolConfig = {\n  locks: {\n    '0xEE9FE39966DF737eECa5920ABa975c283784Faf8: {\n      name: 'A Lock'\n    }, \n  },\n  icon: 'https://staging-app.unlock-protocol.com/static/images/svg/default.svg', \n  callToAction: {\n    default: 'This content is locked. Pay with cryptocurrency to access it!',\n    expired: 'This is what is shown when the user had a key which is now expired',\n    pending: 'This is the message shown when the user sent a transaction to purchase a key which has not be confirmed yet',\n    confirmed: 'This is the message shown when the user has a confirmed key',\n    noWallet: 'This is the message shown when the user does not have a crypto wallet which is required...',\n  },\n  // This is the addition to the config!\n  metadataInputs: [\n    {\n        name: 'First Name',\n        type: 'text',\n        required: true,\n        public: true,\n    },\n    {\n        name: 'Last Name',\n        type: 'text',\n        required: false,\n    },\n    {\n        name: 'Email Address',\n        type: 'email',\n        required: true,\n    },\n  ],\n}\n```\n\nAs you can see, we're going to collect 3 pieces of information: a first name (required, public), a last name (optional, protected), and an email address (required, protected). \n\n## The Checkout\n\nLet's walk through the flow. Here's the page when first visited. The full content of the page is behind a lock (because this article isn't available to the public yet).\n\n<p style=\"text-align:center\">\n    <img src=\"/static/images/blog/metadata-collection/lockedPage.png\" width=\"750px\" alt=\"the locked page\">\n</p>\n\nWhen a user clicks the \"Join us\" button, they first see the normal list of key purchase buttons.\n\n<p style=\"text-align:center\">\n    <img src=\"/static/images/blog/metadata-collection/preCheckout.png\" width=\"750px\" alt=\"the checkout modal\">\n</p>\n\nThen when they click the purchase button, they see the metadata fields we specified in the config. Note that the required fields have an asterisk next to them, and the form will not submit until they are filled. The field type provided in the config also maps to the kind of `<input>` element, so the email address field will also undergo some validation before it is accepted.\n\n<p style=\"text-align:center\">\n    <img src=\"/static/images/blog/metadata-collection/unfilledForm.png\" width=\"750px\" alt=\"the unfilled form\">\n</p>\n\n<p style=\"text-align:center\">\n    <img src=\"/static/images/blog/metadata-collection/filledForm.png\" width=\"750px\" alt=\"the filled form\">\n</p>\n\nAfter submitting the form, the user is prompted to sign a message. This way we can make sure that the only person who can save information for a given address is the person in charge of that address.\n\n<p style=\"text-align:center\">\n    <img src=\"/static/images/blog/metadata-collection/signatureRequest.png\" width=\"750px\" alt=\"the signature request\">\n</p>\n\nOnce they sign the message, the normal checkout flow continues and the user is asked to authorize the purchase transaction.\n\n<p style=\"text-align:center\">\n    <img src=\"/static/images/blog/metadata-collection/metamaskPurchase.png\" width=\"750px\" alt=\"the purchase request\">\n</p>\n\nNow they have a key and have access to the article.\n\n## But Wait, There's More\n\nThe other side of this process is from the creator's perspective. Our user has a key, and as part of the purchase they submitted information we can use to notify them of new articles.\n\nFrom the Unlock dashboard, we can click the \"Members\" button on our lock, and that will take us to the following page:\n\n<p style=\"text-align:center\">\n    <img src=\"/static/images/blog/metadata-collection/membersPage.png\" width=\"750px\" alt=\"the members page with metadata\">\n</p>\n\nAs you can see, it contains a list of all key holders on this lock, how long their key is valid for, and what metadata we have about them. In this case, we have a first name and an email address which are exactly the pieces we need for a mailing list. We only have one key holder right now, but in practice there may be many so the Members page provides a CSV export of the metadata for easier automated processing.\n"},{"title":"Checking Keys In","subTitle":"Tickets to conferences are memberships!","authorName":"Julien Genestoux","publishDate":"February 6, 2020","description":"At Unlock, we're proud to power the tickets for several conferences... but no ticketing solution is complete without a check-in mechanism!","image":"/static/images/blog/introducing-tickets/introducing-tickets.jpg","slug":"checking-key-in","content":"\n\nMemberships are everywhere: from your local gym, to your favorite news site, through conferences! At Unlock, we take great care in making sure we can _bridge_ the gap between online memberships and the offline world.\n\nToday, we're excited to show you the flow to **check users in** if you are using keys to a lock as tickets for a conference.\n\n# The flow\n\nFirst, the users will have to purchase a ticket. They can do this on your site if you add an Unlock button, like [our friends at EthCC did](/blog/ethcc-tickets).\n\nThe ticket is a non-fungible-token, which sits in their crypto wallet... like any other asset. We also [built a key chain](https://app.unlock-protocol.com/keychain/) where users can instantly view all of their memberships (and soon, much, much more!).\n\nOn the keychain, key owners can \"confirm ownership\" of their ticket, which is a way for them to sign the NFT to prove that they own it.\n\n<p style=\"text-align:center\" ><img width=\"300\" src=\"/static/images/blog/checking-key-in/keychain.png\" alt=\"key in keychain\"></p>\n\n\nWith their signature we generate a QR code which can then be used by anyone to verify that indeed, this user owns a key and that this key is valid. In fact, the QR code includes a full URL can be loaded to verify if the key is valid. Below is my key to EthCC. You can scan it with your camera application!\n\n\n<p style=\"text-align:center\" ><img width=\"300\" src=\"/static/images/blog/checking-key-in/ethcc-ticket-qrcode.png\" alt=\"qr code ticket\"></p>\n\n\n# Checking users in\n\nUnlock keys are, by default, transferable. This means that, unless we use a mechanism to prevent this, someone could use their key (and the corresponding QR code) to enter a venue, transfer the key to another user, who would re-use the same key (and another version of the QR code) to enter the venue as well. **This is not how tickets are supposed to work**!\n\nThe verification page above works from any web browser... but, if viewed from inside a browser which has a crypto wallet and if the viewer is actually the lock owner, **the viewer can \"mark\" the ticket as checked-in**. For this, we are using metadata on the NFT which can only be set by the lock owner. This way, if the ticket is then transfered to someone else, the organizers would still be able to quickly identify sneaky users who are trying to re-use a ticket.\n\n\n<p style=\"text-align:center\" ><img width=\"300\" src=\"/static/images/blog/checking-key-in/checked-in-key.png\" alt=\"checked-in!\"></p>\n\nWith our support for credit cards, the ability to ask users to submit information for their tickets, and sell them on the organizers' website directly, we believe Unlock now provides a **ticketing experience** that's even better than most legacy solutions, while still leveraging Ethereum's core capabilities: decentralization, permissionless and programmable!\n"},{"title":"Swap and Call","subTitle":"Simplifying spending on Ethereum","authorName":"Nick Mancuso","publishDate":"January 31, 2020","description":"Calling contracts without having to get a specific ERC-20 token type first.","image":"/static/images/blog/unlocking-smart-contracts/code.jpeg","slug":"swap-and-call","content":"\n\nUnlock Protocol enables content creators to sell keys which are NFTs used to gain access, unlock features, and/or display support for the creator.  The content creators choose the price and which currency they prefer. ETH is the native currency but the value is volatile. Many prefer to price things in USD by using an ERC-20 token such as DAI.\n\nWe need to make this easy for users.\n\nIf someone is holding ETH, don’t tell them to find an exchange to buy DAI first - not if we can do it for them.  Similarly if they are holding SAI or USDC but the content creator asked for DAI - it should just work.\n\nComposability on Ethereum has been a recent topic of discussion in the industry. A great example popping up are DEX aggregators - these can connect to several exchanges to ensure traders always get the most for their money. It got us thinking...\n\nBuying an NFT isn’t really much different than swapping from BAT to DAI. So we are not really solving a new problem here. And we have great examples to learn from.\n\n## What this means for users\n\nWe do not have a frontend yet, but it’s coming! Once the feature has been integrated, users will be presented options during checkout.\n\nE.g. if the key costs $5, I could have the option to:\n - Pay with ~5 DAI / SAI / USDC / USDT\n - Pay with ~0.03 ETH\n - Pay with ~25 BAT\n\nOnly options using tokens the user actually owns will be presented. So if the user does not have USDT, it will not be mentioned.\n\nThis helps to overcome one of the challenges users have today - [“there are just too many ERC-20 [token types]”](https://twitter.com/julien51/status/1222957379031117825).\n\n## How it works\n\n[swap-and-call](https://github.com/unlock-protocol/unlock/tree/master/smart-contract-extensions) has an implementation that’s very similar to the [1inch.exchange](https://etherscan.io/address/0x11111254369792b2Ca5d084aB5eEA397cA8fa48B#code) contract. It’s basically a batch transaction processor with a little logic before and after for this use case. It is not built for Unlock specifically and does not assume any specific DEX, this approach should work for many other use cases as well.\n\nHigh level steps for a swapAndCall transaction:\n - Collect tokens from the user using `transferFrom` (if spending tokens instead of ETH)\n - Call one or more contracts (any contract, any method, and params may be included)\n - Send any tokens remaining back to the user\n\nFor Unlock’s use case, the contract calls we make are:\n - Approve Uniswap to `transferFrom` SwapAndCall (if spending tokens instead of ETH)\n - Call Uniswap to swap from the source token into the token type needed to buy a key\n - Approve the Lock to `transferFrom` the SwapAndCall contract (if the key is priced in tokens instead of ETH)\n - Call purchase on the lock contract to acquire a key which is sent directly to the user\n\n<p style=\"text-align:center\">\n\t<img src=\"/static/images/blog/unlocking-smart-contracts/code.jpeg\" width=\"400px\" alt=\"Smart contracts\">\n</p>\n\nHere’s [an example transaction](https://etherscan.io/tx/0x8c0e34bb009a13b4c35ba3bd6b96c6ed2b5807ac0e5da47f65350017b38f5450) where I use SwapAndCall to pay with ETH and buy a key priced at $1, in DAI.\n\nI sent the transaction to SwapAndCall with 0.0056 ETH (~$1.02)\n - SwapAndCall forwards the ETH with a call to Uniswap to swap for the exact amount of DAI required\n - Uniswap sends DAI to the SwapAndCall contract and refunds the leftover ETH\n - SwapAndCall calls `purchase` and the key is sent directly to the end-user\n - SwapAndCall refunds the remaining 0.00009 ETH to the end-user\n\nWe are using [Uniswap](https://uniswap.exchange/swap) but this process would work with other exchanges such as [Kyber](https://kyber.network/) or [Oasis](https://oasis.app/).  You could also use a DEX aggregator such as [1inch](https://1inch.exchange/), [0x](https://0x.org/api/), [Dex.ag](https://dex.ag/), or [ParaSwap](https://paraswap.io/#/).\n\n## What’s next\nThe front-end of course. But there is another big feature we want to add -- meta-transactions! (see our [roadmap document](https://github.com/unlock-protocol/unlock/wiki/Roadmap) to learn more!)\n\nMeta-transactions allow users to sign messages approving smart contract actions, instead of broadcasting transactions. This means they are not paying gas fees directly and do not need to have any ETH.\n\n[DAI](https://etherscan.io/address/0x6b175474e89094c44da98b954eedeac495271d0f#code) is helping to push this forward with the inclusion of the `permit` feature. Combined with SwapAndCall meta-transactions users could buy keys with DAI, without ever owning any ETH.\n\nLike always, [all of our code is open source](https://github.com/unlock-protocol/), and we take pull requests, as well as grant bounties to people who help us move forward!\n\nLet's keep pushing for a better user-experience.\n"},{"title":"Drupal Plugin","subTitle":"Easily add lock to a Drupal site!","authorName":"Julien Genestoux","publishDate":"January 24, 2020","description":"Drupal is one of the most popular Content Management Systems. You can now add locks to a Drupal site easily!","image":"/static/images/blog/drupal/unlock-drupal.jpg","slug":"drupal-plugin","content":"\n\nContent Management Systems make it easy for people to create their own websites. [Drupal](https://www.drupal.org/) is one of the most popular CMS. Drupal is open source and developers can easily customize each Drupal instance. Today, they're also able to easily add locks to limit access to content of features to visitors which own keys to these locks!\n\nA couple of weeks ago, external contributor [Mike Purvis](https://twitter.com/mikedotexe) asked if Unlock would work with Drupal. He quickly rose to the challenge and worked on a plugin; you can now [install it on your own Drupal website](https://www.drupal.org/project/unlock)! It is also [fully open source too](https://github.com/mikedotexe/unlock), so you can of course help improve it!\n\nTo showcase it, Mike created a website where you can [unlock dad jokes](https://untoldhq.com/unlock-dad-jokes) ;) Perfect way to end a busy week!\n"},{"title":"Emergency Upgrade","subTitle":"Version 1-3 is now available","authorName":"Nick Mancuso","publishDate":"January 17, 2020","description":"Explaining what went wrong and why we released a new version so quickly after our last upgrade.","image":"/static/images/blog/emergency-upgrade-1-3/code_vulnerability.jpg","slug":"emergency-upgrade-1-3","content":"\n\nWe recently noticed a vulnerability which if abused could have had bad consequences – but we caught it early and fixed it promptly. This post aims to explain the errors we made with our [most recent smart-contract update](https://unlock-protocol.com/blog/version-1-2/).\n\nThere were problems with this release which if targeted by an attacker had the potential to do one of the following:\n - Steal money made from previous key sales.\n - Break every lock (and key) using the new version - blocking new sales, preventing key owners from being recognized and preventing the lock owner from accessing any funds previously made.\n\nWe fixed the second issue very quickly, so no worries there.  But funds are at risk if your lock is impacted.  For that we need the owners of these locks themselves to upgrade ASAP. (there are 14 locks which are affected)\n\nThis only impacts locks created between Jan 6th until Jan 17th (locks created between the block #9227829 and the block #9295958). If you recently created a lock, please go to the Unlock dashboard to check if you are impacted. If the dashboard does not show a warning like the one below, **your lock is safe**.\n\n<p style=\"text-align:center\">\n\t<img src=\"/static/images/blog/emergency-upgrade-1-3/dashboard_warning.png\" width=\"750px\" alt=\"Dashboard warning\">\n</p>\n\nSo what happened?  Let’s start with the issue we were able to fix right away and then we’ll get to the juicy stuff.\n\n## Break every lock using the new version\n\n> This issue is about our deployment process.  We simply needed to take action before an attacker.  We will avoid this race condition in the future.\n\nWe recently changed the locks deployed to use the minimal proxy standard, [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).  This significantly reduces the cost to create new locks and leads to less blockchain bloat.  When using proxies any data set in the constructor is lost so instead we call a single-use function called `initialize`.\n\nDuring normal operation a user calls `createLock` on our main Unlock contract.  That function will deploy the lock and call `initialize` in the same transaction.  It’s responsible for recording data such as the lock owner and the key price.\n\nProxies work by reading the implementation logic from a template.  The template is nothing more than a contract containing the logic / source code for each individual lock to leverage.\n\nAdditionally we allow the lock owner to `selfdestruct` their lock after it's outlived its usefulness. This allows them to be good citizens by freeing up data that is no longer relevant - reducing blockchain bloat, preventing nodes from maintaining state that no one is interested in anymore.\n\nWe forgot to `initialize` the template!\n\nIf someone figured this out before we did they could have called `initialize` on the template to make themselves the owner and then make an owner-only call to `selfdestruct` the contract.  OpenZeppelin has a section in their docs talking [about this specific concern](https://docs.openzeppelin.com/upgrades/2.6/writing-upgradeable#potentially-unsafe-operations).\n\nOnce the template has been destroyed, all proxies attempting to read the implementation logic will fail. This means no new purchases, no reading who owns a key, and no way to withdraw any funds raised from previous key sales.\n\nWe initialized the template and renounced ownership so that no one can ever call `selfdestruct`. We are working on [adding this to our deployment script](https://github.com/unlock-protocol/unlock/tree/julien-unlockjs) so this step is not overlooked in the future.\n\n## Steal money from key sales\n\n> This issue is due to a bug in our code.  The bug has been fixed so that any new locks created going forward are fine.  But some locks were impacted and we need lock owners to do the upgrade.\n\nAs described above, we recently introduced `initialize` calls to the process for creating locks.  Additionally it’s relevant to note that there is a fair bit of code enabling lock features.  So to preserve developer sanity we use inheritance instead of jamming everything into a single file.  Each individual contract we inherit may have some state to initialize.\n\nWhen you inherit multiple contracts that require initialization, the top-level contract implements `initialize` and then forwards relevant information to the others.\n\nThere are three ways this can be done safely:\n 1) Ensure that only one `initialize` function is public or external.\n 2) Add a modifier to each `initialize` function to ensure it cannot be called twice.\n 3) Use the same function signature so that only one implementation is accessible, and ensure that function cannot be called twice.\n\n(1) is not a complete solution for us since we depend on OpenZeppelin.  In order for them to support a variety of use cases every contract uses a public initialize function.  They use option (2) instead.  Option (3) is a little risky as we make changes and add more features.\n\nThere were 2 `initialize` calls for which we did not handle this correctly:\n\n```\n  function initialize(\n    address _tokenAddress\n  ) public\n  {\n    tokenAddress = _tokenAddress;\n    require(\n      _tokenAddress == address(0) || IERC20(_tokenAddress).totalSupply() > 0,\n      'INVALID_TOKEN'\n    );\n  }\n```\n\nand\n\n```\n  function initialize() public\n  {\n    // default to 10%\n    refundPenaltyBasisPoints = 1000;\n  }\n```\n\nThese two calls are public and have no modifier.  This means anyone can call them at any time on affected locks.\n\nWe have a number of other `initialize` functions but they were all safe using one of the three techniques explained above.\n\nThe impact of this is anyone can change the token a lock is priced in.  And anyone can reset the refund penalty back to the default value of 10%.\n\nDoesn’t sound so bad at first.  But let’s consider how an attacker could use this to their benefit.  Here’s how you could leverage this bug to steal funds:\n - Find a test ERC-20 token. There are a few publicly available or you could create your own. We just need a way to mint a balance for free.\n - Mint test tokens for yourself.\n - Find a lock on the broken version with any money inside (from previous key sales).\n - Call `initialize(address _tokenAddress)` to change the lock to be priced in the test token you’re using.\n - Buy a key as normal -- but you are spending test tokens / fake money.\n - Call `initialize(address _tokenAddress)` to change the lock back to its original currency.\n - Call `cancelAndRefund()` to get a partial refund for your purchase.\n\nYou spend fake money and then are refunded with real money.  And if the lock owner tries to disable cancels by increasing the refund penalty, the attacker simply calls `initialize()` to reset it back to 10%.\n\nWe fixed this by making all our custom initialize functions `internal` and tested to confirm that the remaining publicly accessible calls cannot be called multiple times.\n\n<p style=\"text-align:center\">\n\t<img src=\"/static/images/blog/emergency-upgrade-1-3/code_vulnerability.jpg\" width=\"400px\" alt=\"Smart contracts\">\n</p>\n\nSo go to the dashboard to confirm your locks are not impacted.  There are very few at risk and nearly no funds for people to steal, but we need to ensure impacted locks are upgraded before you start to make sales.\n\nHow to upgrade:\n - Go to the Unlock dashboard\n - Create a new lock with the same settings as before\n - Update any integrations with the new lock address\n\nIf you had sold any keys on an impacted lock:\n - Call `withdraw` ASAP to secure your funds\n - Call `grantKeys` on the new lock to ensure your members did not lose anything in the process\n\nOver the coming weeks we will be discussing what we can do to help ensure we don't make an error like this again in the future.\n\nThe issues have been fixed.  You should not feel hesitant to use the system because of what was discussed above.  In the end, no lock owner has lost funds and end-users (those purchasing keys) were never at risk at all.\n\nQuestions or concerns? Get in touch we’d be happy to explain further: hello@unlock-protocol.com\n"},{"title":"Smart Contract Upgrade: Version 1.2","subTitle":"We shipped a large upgrade to our Unlock contract and the new locks have new features!","authorName":"Julien Genestoux","publishDate":"January 10, 2020","description":"We wanted to start the year with a big release, so we shipped a very large upgrade (the largest since June 2018) to our smart contracts. This new version brings a ton of new features which will eventually bubble up to the Unlock user interfaces (and beyond!).","image":"/static/images/blog/version-1-2/smart-contract-1-2.jpg","slug":"version-1-2","content":"\n\nWe wanted to start the year with a big release, so we shipped a very large upgrade (the largest since June 2018) to our smart contracts. This new version brings a ton of new features which will eventually bubble up to the Unlock user interfaces (and beyond!).\n\n# The Unlock Contract\n\nLet's start with a quick reminder about the architecture behind our smart contracts. First, there is the `Unlock` contract. It's a factory contract, whose main job is to deploy locks for creators. This contract is _currently_ owned by us, at Unlock Inc, through the use of a multi-sig contract (powered by [Gnosis](https://gnosis.io/)), but our hope is that eventually, it can be co-owned by the whole Unlock community.\n\nThe `Unlock` contract is upgradable by its owner. This means we can add features to make it more useful. We can also change some of its behavior. For this, we use [ZeppelinOS](https://openzeppelin.com/sdk/) and their proxy approach. The contract at the address `0x3d5409cce1d45233de1d4ebdee74b8e004abdd13` (or `unlock-protocol.eth`) is what is called a _proxy_ contract (See [EIP-1967](https://eips.ethereum.org/EIPS/eip-1967)). Its purpose is to keep track of its internal data (like any smart contract), as well as of the actual _implementation_ which can alter this data. The process to upgrade is fairly strict but guarantees that it will never overwrite any of the past data, while still allowing the addition of new features.\n\nIf you want to explore Unlock, Etherscan provides a [great interface](https://etherscan.io/address/0x3d5409cce1d45233de1d4ebdee74b8e004abdd13#code).\n\n![Etherscan](/static/images/blog/version-1-2/etherscan.png)\n\n## The Proxy\n\nFirst, you can see that you can actually interact with both the proxy, as well as the implementation directly. The proxy part offers the ability to `upgradeTo` a new version (by proving the address of the new implementation), `upgradeToAndCall` which does the same but also invoke a custom function right after the upgrade, or `changeAdmin` which would change the admin. All of these functions can only be called by the admin: don't waste gas calling them yourself!\n\nAs of last Monday, the [proxy's admin](https://etherscan.io/address/0x79918A4389A437906538E0bbf39918BfA4F7690e) [upgraded the implementation](https://etherscan.io/tx/0x358335670ef14c1deb72b3711eb0dd629ebb3801f1aa2b64a4feb04df00dc139) to use a new one, [deployed at this address](https://etherscan.io/address/0xe36793f0b4db71ff0a5216412f80ba89b2927445).\n\n## Unlock\n\nMore importantly, you can interact with the Unlock smart contract itself. For example, you can view view [the owner of the Unlock contract](https://etherscan.io/address/0xa39b44c4affbb56b76a1bf1d19eb93a5dfc2eba9), the global token symbol for all NFT: `KEY` or even the current version of the Unlock contract (we use `5` internally and `1.2` externally).\n\nAnother very important element that you can view is the _Gross Network Product_ which is the total sum of ethereum spent to purchase lock keys, as long as the key was priced in Eth, DAI, SAI or BAT. We use Uniswap to get a price feed when we need to convert to Ether, but that's for another post ;) Measuring the Gross Network Product is a critical piece of the [Unlock Discount Token](https://github.com/unlock-protocol/unlock/wiki/The-Unlock-Discount-Tokens) model that we are working on to incentivize membership referrals.\n\nBy using Etherscan you can also deploy locks, without having to go through [our Dashboard](https://app.unlock-protocol.com/dashboard/), using the `createLock` method directly. The new version deployed on Monday uses the new Ethereum `create2` and leverages [eip-1014](https://eips.ethereum.org/EIPS/eip-1014) under the hood. This allows creators to deploy locks at only 15% of the cost that it took before that! In order to achieve this, we had to deploy a so [called `template` contract](https://etherscan.io/address/0x2d5487420fbeb5ba74eadf51084d4f71e1733983) which provides the reference implementation for locks to leverage.\n\n\n# The new public locks\n\nI want to repeat that old the **locks deployed before Monday have stayed absolutely unchanged**. It is actually impossible to change them. Once deployed, their code cannot be altered. This is a very important part of the \"decentralization promise\" that we make to creators: nobody will be able to change the terms of their memberships, but them.\n\nHowever, if someone deploys a lock now, it comes with new features and improvements. Here are a few of the most exciting ones.\n\n## On Key Sold hook\n\nWe strongly believe that one of the most important benefits of building on Ethereum is the **composability**. In practice, this is the ability for contracts to interact for the benefits of users. For example, purchasing a key using an ERC20 is an example of composability. Now, with hooks, the lock owner can define what other contracts will be able to run when a key has been sold.\n\nWhy is this useful? Here are 2 of my favorite examples:\n\n1. _Matching donations_: someone could agree to match donations so that for any key purchase on a donation lock, they would make a payment to the lock as well. The \"matching\" contract could even query the lock itself to know how many keys have been sold and make a quadratic matching!\n\n2. _A bonded curve lock_: a hook could increase the price of keys on a lock based on how many keys have been sold in the past. This can create bonding curves where early members end up paying less than late members, while also having the ability to re-sell their early membership at a higher price. You can easily use a lock as a [Token Curated Registry](https://medium.com/@ilovebagels/token-curated-registries-1-0-61a232f8dac7) where only members of the lock can change the data of the registry!\n\nIn practice, there are endless possibilities here and we cannot wait to see what people are building.\n\n## Full refunds\n\nThis has been a request by the [EthGlobal](https://unlock-protocol.com/blog/ethwaterloo-tickets/) team: they wanted the ability to easily refund all participants to the hackathon, if they checked-in. Until then, it required a 2 step process, where the lock owner would have to withdraw the funds from the lock and then send them to the participants from their own address. Now, it can be done through the lock itself, making refunds very easy ;)\n\n## Risk Free trials\n\nThe keys to a lock can be \"burned\" by their owner, triggering a pro-rated refund, based on how long the key has been used. Lock creators now have a way to define a period during which the key owner can request a _full refund_, making risk free trials possible.\n\n## Tips\n\nWhen we introduced our donation locks, several users asked us about the ability to \"pay more\" than the required price. Up until now, it was actually not possible to submit the actual amount that a consumer wants to pay for a membership key. With this new version, whoever purchases a key actually submits the amount they want to pay (greater than or equal to the price set by the creator).\n\n## Partial sharing\n\nI am very excited about this one: partial sharing of a membership. [Unlock keys are non-fungible](/blog/non-fungible-tokens-betaworks/), but... they are time based, and you can now split a membership and send some of your time to someone else! This has a lot of very interesting implications. For example, members can now share \"paywall-ed\" links along with a few minutes worth of memberships, in order to let someone else read the content!\n\n# Building on top of Unlock\n\nOur smart contracts are the \"lowest\" point of integration. Once a lock has been deployed, its functionality is immutable, which means that other application can start integrating with it in a safe way as it's API will never change. We publish npm modules which include interfaces to our smart contracts. Here is our [npm module for version 1.2](https://www.npmjs.com/package/unlock-abi-1-2). It's the \"raw\" API for locks of that version.\n\nWe also publish [unlock-js](https://www.npmjs.com/package/@unlock-protocol/unlock-js) which is another npm module. This one provides a higher level abstraction for all locks, while also having currently less granularity. It abstracts away versions, which means that it can be used to interact with any lock, regardless of its version.\n\nLike always, [all of our code is open source](https://github.com/unlock-protocol/unlock/), and we take pull requests, as well as [grant bounties](https://github.com/unlock-protocol/unlock/issues?q=is%3Aissue+is%3Aopen+label%3A%F0%9F%92%B0gitcoin) to people who help us move forward!\n\n\n\n\n\n\n\n\n\n\n"},{"title":"Forbes Ad Free Experience in the News","subTitle":"We made something the internet loves","authorName":"Sascha Mombartz","publishDate":"Jan 6, 2020","description":"A rundown of a few memorable tweets and press coverage from our Forbes Ad Free Experience Launch","image":"/static/images/blog/forbes-in-the-news/forbes-article.jpg","scripts":["https://platform.twitter.com/widgets.js"],"slug":"forbes-in-the-news","content":"\n\n![A few clicks to make it ad free.](/static/images/blog/forbes-in-the-news/hero.jpg)\n\nA few weeks ago we launched a new feature together with Forbes – an Ad Free Experience. Readers can now remove all ads on Forbes by purchasing a key for 0.0052 ETH a day (there's also a monthly option).\n\nNot only were we happy but the internet rejoiced! Many felt that the ad free feature was a great use case for the blockchain. We collected a couple of tweets and press on what people had to say.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">A big step for crypto today:<br><br>🔒<a href=\"https://twitter.com/UnlockProtocol?ref_src=twsrc%5Etfw\">@UnlockProtocol</a> is now live on <a href=\"https://twitter.com/Forbes?ref_src=twsrc%5Etfw\">@Forbes</a> in the crypto section. Check it out and try it!<a href=\"https://t.co/8uLWDRTlRr\">https://t.co/8uLWDRTlRr</a> <a href=\"https://t.co/NNuxHjSbJN\">pic.twitter.com/NNuxHjSbJN</a></p>&mdash; Peter (@pet3rpan_) <a href=\"https://twitter.com/pet3rpan_/status/1207072452351651840?ref_src=twsrc%5Etfw\">December 17, 2019</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">.<a href=\"https://twitter.com/UnlockProtocol?ref_src=twsrc%5Etfw\">@UnlockProtocol</a> has been at the forefront for creating new membership-driven monetization for the Web - and we&#39;re stoked to see this partnership with <a href=\"https://twitter.com/Forbes?ref_src=twsrc%5Etfw\">@Forbes</a> to drive more adoption for the <a href=\"https://twitter.com/hashtag/Web3?src=hash&amp;ref_src=twsrc%5Etfw\">#Web3</a> ecosystem. <a href=\"https://t.co/9mbEVdZAsB\">https://t.co/9mbEVdZAsB</a> <a href=\"https://t.co/I0IU9UyXLl\">pic.twitter.com/I0IU9UyXLl</a></p>&mdash; ConsenSys (@ConsenSys) <a href=\"https://twitter.com/ConsenSys/status/1207768724612304896?ref_src=twsrc%5Etfw\">December 19, 2019</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Congratulations to <a href=\"https://twitter.com/Forbes?ref_src=twsrc%5Etfw\">@Forbes</a> with the new ads-free, crypto-powered user experience powered by our partner <a href=\"https://twitter.com/UnlockProtocol?ref_src=twsrc%5Etfw\">@UnlockProtocol</a>. The future of web monetization is here. Best experience of course with the <a href=\"https://twitter.com/opera?ref_src=twsrc%5Etfw\">@opera</a> browser!<a href=\"https://t.co/m68DViif38\">https://t.co/m68DViif38</a></p>&mdash; Opera (@opera) <a href=\"https://twitter.com/opera/status/1207308091097833472?ref_src=twsrc%5Etfw\">December 18, 2019</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">A wonderful crypto use case:<br><br>It is well known that <a href=\"https://twitter.com/Forbes?ref_src=twsrc%5Etfw\">@Forbes</a> has the worst ad situation in online publishing, bordering on unreadable.<br><br>Now, if you go to their <a href=\"https://twitter.com/ForbesCrypto?ref_src=twsrc%5Etfw\">@ForbesCrypto</a> section and pay a small amount of ETH using <a href=\"https://twitter.com/UnlockProtocol?ref_src=twsrc%5Etfw\">@UnlockProtocol</a>, it eliminates ads on the *entire* site.<br><br>A+</p>&mdash; Mike Dudas (@mdudas) <a href=\"https://twitter.com/mdudas/status/1212387115394387969?ref_src=twsrc%5Etfw\">January 1, 2020</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Hi, Julien &amp; team — congrats on Forbes. Let’s talk again.</p>&mdash; BrendanEich (@BrendanEich) <a href=\"https://twitter.com/BrendanEich/status/1207373107679375360?ref_src=twsrc%5Etfw\">December 18, 2019</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">This is a big deal - you can now by a <a href=\"https://twitter.com/Forbes?ref_src=twsrc%5Etfw\">@Forbes</a> subscription with crypto courtesy of <a href=\"https://twitter.com/UnlockProtocol?ref_src=twsrc%5Etfw\">@UnlockProtocol</a>. Can&#39;t wait to see what <a href=\"https://twitter.com/julien51?ref_src=twsrc%5Etfw\">@julien51</a> &amp; team have up their sleeve next. <a href=\"https://t.co/LOLRRa164w\">https://t.co/LOLRRa164w</a></p>&mdash; Megan Knab (@knotmegan) <a href=\"https://twitter.com/knotmegan/status/1207084576419524614?ref_src=twsrc%5Etfw\">December 17, 2019</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">This is one of those small step, giant leap moments - <a href=\"https://twitter.com/UnlockProtocol?ref_src=twsrc%5Etfw\">@UnlockProtocol</a> has been hard at work on creating the future of composable memberships and it&#39;s great to see <a href=\"https://twitter.com/Forbes?ref_src=twsrc%5Etfw\">@Forbes</a> take this step towards fixing the ad-driven economies! So stoked for this!! <a href=\"https://t.co/oLPppWBBPd\">https://t.co/oLPppWBBPd</a></p>&mdash; praneeth_s (@bees_neeth) <a href=\"https://twitter.com/bees_neeth/status/1207296342835519493?ref_src=twsrc%5Etfw\">December 18, 2019</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">The last week in crypto:<br><br>-<a href=\"https://twitter.com/MakerDAO?ref_src=twsrc%5Etfw\">@MakerDAO</a> raises $27.5mil from <a href=\"https://twitter.com/dragonfly_cap?ref_src=twsrc%5Etfw\">@dragonfly_cap</a> and <a href=\"https://twitter.com/paradigm?ref_src=twsrc%5Etfw\">@paradigm</a> 💰<br>-<a href=\"https://twitter.com/gitcoin?ref_src=twsrc%5Etfw\">@gitcoin</a> grants round 4 announced 💸<br>-<a href=\"https://twitter.com/TXRXResearch?ref_src=twsrc%5Etfw\">@TXRXResearch</a> team announced 🤓<br>-<a href=\"https://twitter.com/TornadoCash?ref_src=twsrc%5Etfw\">@TornadoCash</a> v2 now live 🌪️<br>-<a href=\"https://twitter.com/Forbes?ref_src=twsrc%5Etfw\">@Forbes</a> integrates <a href=\"https://twitter.com/UnlockProtocol?ref_src=twsrc%5Etfw\">@UnlockProtocol</a> 🔐<br><br>Much more 👇<a href=\"https://t.co/a1tMR4ONhU\">https://t.co/a1tMR4ONhU</a></p>&mdash; Anthony Sassano | sassal.eth (@sassal0x) <a href=\"https://twitter.com/sassal0x/status/1209089288937230336?ref_src=twsrc%5Etfw\">December 23, 2019</a></blockquote>\n\nIf you want to read up more about it check out [our blog post](https://unlock-protocol.com/blog/forbes-ads-free/) and the following press.\n\n[cryptonews.net](https://cryptonews.net/en/news/other/258635/), [cryptomode.com](https://cryptomode.com/forbes-experiments-with-crypto-paywall-solution-unlock-protocol/), [ethhub.substack.com](https://ethhub.substack.com/p/ethhub-weekly-93), [weekinethereumnews.com](https://weekinethereumnews.com/week-in-eth-news-december-22-2019/), [forbes.com](https://www.forbes.com/sites/rogerhuang/2019/12/26/hard-hitting-investigative-journalism-you-can-support-with-cryptocurrencies/#3b8890f752c8), [tokenhell.com](https://tokenhell.com/forbes-starts-to-accept-payments-in-ethereum-for-articles/), [coinfomania.com](https://coinfomania.com/unlock-protocol-enables-eth-payments-on-forbes/), [coinspeaker.com](https://www.coinspeaker.com/forbes-paying-ethereum/), [steemleo.com](https://steemleo.com/hive-167922/@taskmaster4450/forbes-could-be-a-candidate-for-a-smt) and we even got written up in China on [chainnews.com](https://www.chainnews.com/news/394163764306.htm).\n"},{"title":"Unlocking an ads-free Forbes","subTitle":"Memberships can have diverse benefits!","authorName":"Julien Genestoux","publishDate":"December 17, 2019","description":"Forbes introduced their very first membership today and it lets anyone with an ethereum wallet unlock an ads free experience","image":"/static/images/blog/forbes-ads-free/forbes.svg","slug":"forbes-ads-free","content":"\n\nAt Unlock, we believe that the attention driven economy will be replaced by a membership driven economy. In today's web, creation is rewarded if it is able to attract the eyes, rather than expand the sight: this brought us information overload, endless slideshows, clickbait and fake news.\n\nMore and more people are using ad-blockers, but these come with significant problems: first they starve creators of their revenue streams, and they actually do not fix the incentives. Creators are still paid based on how much attention they can steal; even if it is from fewer and fewer people.\n\nToday, we're proud to announce that [Forbes](https://www.forbes.com/), a publication which writes a lot about the blockchain revolution, is offering the ability to unlock an ad-free experience on their site, using Unlock!\n\n## How to\n\nForbes deployed 2 locks, the [first one](https://etherscan.io/token/0xf429bb8044bf4b21c65e3ec459eb3010197c6f82) offers a month long ad-free experience on the Forbes.com, while the [second offers](https://etherscan.io/token/0xb2b879764c649c7769f7c90845b0cb2a86add821) the same but only for a week. To purchase a key, you will need to use a crypto wallet such as Opera, MetaMask or Coinbase Wallet. Then, head to The [crypto section of forbes.com](https://www.forbes.com/crypto-blockchain), and click on the \"Unlock an ads free experience\" button.\n\n![Forbes NFT](/static/images/blog/forbes-ads-free/unlock-forbes.png)\n\nAn Unlock powered pop-up will open up, allowing you to send a transaction to purchase key! Immediately, even if the transaction has not been mined yet (thanks to optimistic unlocking), you should see the ads disappear, for the duration of the key you bought, on the whole forbes.com website!\n\nOnce the transaction has been mined, users will receive a non fungible token which represents their membership! Like any NFT, they can transfer it on marketplaces like OpenSea, for example.\n\n![Forbes NFT](/static/images/blog/forbes-ads-free/forbes-nft.png)\n\n## Dog fooding\n\nForbes is at the forefront of publications writing about crypto and blockchain and they're doing what too few \"advocates\" in that space are: experimenting with crypto based solutions.\n\nSimilarly, if you believe as a user that cryptocurrencies are the future of money, whether as stores of value, means of exchanging goods and services, or even as decentralizing technology, you should experiment with it!\n\nAs such, we are offering up to 100 memberships to Forbes ads-free lock! For this, we've asked the team at [LinkDrop](https://linkdrop.io/) to develop a way to [generate links which include a key to a lock](https://github.com/LinkdropHQ/linkdrop-unlock)! To receive your own key (for free!) just send us follow us on [Twitter](https://twitter.com/unlockprotocol) (so we can send a DM) and send us an @reply!\n"},{"title":"Newsletters","subTitle":"Newsletters are memberships! Easily start collecting members with their email addresses using Unlock","authorName":"Julien Genestoux","publishDate":"December 12, 2019","description":"Unlock lets you easily collect email addresses from members to create your own paid-for mailing list, using Ethereum and Non Fungible Tokens","image":"/static/images/blog/introducing-newsletter/newsletter.jpg","slug":"introducing-newsletter","content":"\n\nThere are many kinds of memberships. Going back to the origins of the internet, newsletters have always been a popular style of membership. Today, we're excited to show you how you can easily use a lock to create your own newsletter membership with Unlock!\n\n# The Defiant\n\nA couple of weeks ago, while at DevCon in Osaka, I was introduced to [Camila](https://twitter.com/camirusso) who publishes one of the most insightful newsletters about the DeFi movement. When I told her about Unlock and the fact that we [tokenize memberships](/blog/tokenizing-memberships/), we quickly agreed that she needed to provide the ability to join her mailing list using crypto.\n\nToday, that's possible! You can [become a member of The Defiant](https://bit.ly/the-defiant) using DAI. If you join quickly, you can become an [OG member](https://etherscan.io/address/0xFA7001A0310B5E69B7b95B72aeBaA66C72E084bf) (limited to 100 members) for 70 DAI. If you miss the OG perk, you can still join her [regular membership](https://etherscan.io/address/0x43154efc9cb33c80833c0dec1e15bb9cfc1275e5) for the next year, at 100 DAI!\n\nOf course, like any other key, The Defiant membership keys are Non Fungible Tokens and your favorite crypto wallet should show them. For example, here's my [OG membership on OpenSea](https://opensea.io/assets/0xFA7001A0310B5E69B7b95B72aeBaA66C72E084bf/1).\n\n# How It Works\n\nFirst, the creator deploys their own lock on the Ethereum chain. Once you are on the newsletter landing page, you can enter your email address. As you submit, the address is saved inside the metadata of your token.\n\nAfter this, you can select which of the memberships (if there is more than one) you want to join. Your crypto wallet of choice will let you perform the transaction, including approving the ERC20 token transfer.\n\nAfter this, the access key will be attached to your account, and you can use Unlock's keychain to view it.\n\nOne of the unique characteristics of our approach is that, exactly like [tickets to conferences](/blog/ethcc-tickets/), the email address is in fact stored in the tokens' metadata. This means that the owner of the lock can easily list all of the members email addresses!\n\n# Get your own!\n\nWant to send emails to your own members? Start by creating your own lock. It's a representation of a membership. Pick a currency, a price, a maximum number of members... and deploy it!\n\nThen, things become a little bit more technical, but here is how to collect email addresses from your members:\n\n1. Start with `https://newsletter.unlock-protocol.com/`\n\n2. Add a title by appending `?title=Your Title`\n\n3. Then, add a description like `&description=My Newsletter`\n\n4. Finally, add one or more locks like these: `&locks=<lock-address>`\n\nAfter this, you can share the URL with anyone who you think should become a member!\n\nLater, once you want to email your users, just click on the `Members` icon on the lock in your dashboard. Once on that page, authenticate using your crypto wallet and you will see a list of members, along with their email addresses.\n\n![Newsletter Members](/static/images/blog/introducing-newsletter/defiant-members.png)\n\nAs you can see the members page includes an export button which lets you download a CSV file. This file can then be imported in your email sending tool of choice!\n"},{"title":"EthCC Tickets","subTitle":"Conference Tickets are short term memberships!","authorName":"Julien Genestoux","publishDate":"December 6, 2019","description":"The largest annual European Ethereum event focused on technology and community is using Unlock for its tickets!","image":"/static/images/blog/ethcc/ethcc.png","slug":"ethcc-tickets","content":"\n\nWe are very proud and excited to announce that the [Ethereum Community Conference](https://ethcc.io/) is using Unlock to sell crypto tickets!\n\nThe Ethereum Community Conference is the largest annual European Ethereum event focused on technology and community. It is organized by the great Ethereum France 🇫🇷 team and 2020's edition will be held between March 3rd and 5th!\n\n[![Get Ticket](/static/images/blog/ethcc/ticket.png)](https://ethcc.io/buy-tickets.html)\n\nLike all other locks, the [ETHCC 2020 lock](https://etherscan.io/address/0x7fe9143379a59329afd7d25e52696a6f1db28d36) implements the ERC721 specification, which means that all tickets are Non Fungible Tokens! When we spoke with Marc and Bettina they told us that they needed to be able to collect attendees' information (email...) and we embarked on a crazy idea: storing that information inside of the NFT itself, as metadata!\n\nIf you decide to purchase your ticket using crypto (you should!), their website will prompt you for your full name, email and phone number. If you submit that information, your web3 browser of choice will prompt you to sign it: it is then saved in a way that only the lock owner (the EthCC team) will be able to read.\n\nAfter that, you will receive the NFT by approving the DAI transfer, and the make the actual purchase.\n\nOnce the purchase transaction is final, like any other token, the token has its own metadata (image, name, description... ). Here is the metadata for [my ticket to EthCC](https://locksmith.unlock-protocol.com/api/key/0x7fe9143379a59329afd7d25e52696a6f1db28d36/1):\n\n```\n{\n  \"name\": \"Unlock Key\",\n  \"description\": \"A Key to an Unlock lock. Unlock is a protocol for memberships. https://unlock-protocol.com/\",\n  \"image\": \"http://locksmith.unlock-protocol.com/lock/0x7FE9143379a59329AfD7D25E52696A6F1Db28D36/icon\",\n  \"attributes\": [\n    {\n      \"trait_type\": \"Expiration\",\n      \"value\": 1603993566,\n      \"display_type\": \"date\"\n    }\n  ],\n  \"userMetadata\": {}\n}\n```\n\nAs you can see, there is a field called `userMetadata`. By default, unless the call is authenticated, it is left empty... because this data is not public! However, if the metadata was retrieved by the EthCC team, then it would show the information I saved during the key purchase.\n\n![Attendee List](/static/images/blog/ethcc/attendee-list.png)\n\nThanks to this feature, the EthCC team can easily list all attendees and their information, by just listing the key owners and their respective metadata. They can also export that list as CSV ;)\n\nAdditionally, when I check in with a QR code on March 3rd, the EthCC team will be able to instantly see all of the metadata linked to my ticket!\n\nAfter [EthWaterloo](https://unlock-protocol.com/blog/ethwaterloo-tickets/), we're more and more excited about being able to provide our ticketing solution to more and more Ethereum events around the world. We believe that with our support for credit card purchases and the ability to collect attendee information, <strong>Unlock's tickets are now comparable to non-crypto based solutions, yet, decentralized</strong>!\n"},{"title":"Shipping Documentation","subTitle":"Helping people get started with Unlock.","authorName":"Akeem Adeniji","publishDate":"November 15, 2019","description":"Helping people get started with Unlock.","image":"/static/images/blog/user-facing-documentation/documentation.jpg","slug":"user-facing-documentation","content":"\n\nDocumentation is important as it allows thoughts and ideas to scale outside of its original context.\nBeing an open source project with hopes that people will find value in our work; we recoginze the amount of impact having compentent documenation can having towards helping other to reach their goals.\n\nAs a starting point, we have begun by outlining the quickest way to get started with the project, and some highlevel info about the project's components.\n\nWe have also made a commitment to the following documentation strategy:\n\n1. End-user facing features require documentation to be considered shippable.\n2. Components intended to be used or extended by developers require documentation to be considered shippable.\n\nWhile it is a work in progress, you can find our current documentation [here](https://docs.unlock-protocol.com).\n"},{"title":"Member Wall","subTitle":"Showing a list of members has never been easier!","authorName":"Julien Genestoux","publishDate":"November 12, 2019","description":"Showing a list of members has never been easier!","image":"https://member-wall.unlock-protocol.com/api/members?locks=0xB0114bbDCe17e0AF91b2Be32916a1e236cf6034F&maxWidth=1000","slug":"member-wall","content":"\n\nThe Unlock team spent the week-end in Waterloo, Canada [hacking on Ethereum](https://unlock-protocol.com/blog/ethwaterloo-tickets/).\n\nI worked on building a \"member wall\", which is just a way to show the list of members for any given lock, as an image.\n\n# What does it really do?\n\nIt's a very simple application which generates a large SVG image which lists all members of a key. For example, here is the list of [participants to the EthWaterloo hackathon](https://member-wall.unlock-protocol.com/api/members?locks=0xb0ad425ca5792dd4c4af9177c636e5b0e6c317bf&maxHeight=300), or the list of people who supported Evan Van Ness' [Week In Ethereum anniversary edition](https://member-wall.unlock-protocol.com/api/members?locks=0x79C91241eFf1F119CDf743730f6e6fB2aF7Fb279&maxHeight=300)!\n\nThe great thing about using images is that they can be embedded on almost any webpage. For example, below is the list of all members to our lock and that image is dynamically refreshed when new members are added!\n\n<object data=\"https://member-wall.unlock-protocol.com/api/members?locks=0xB0114bbDCe17e0AF91b2Be32916a1e236cf6034F&maxHeight=300\" type=\"image/svg+xml\"/>\n\nEach of the members is clickable and will link to the corresponding page on [Etherscan](https://etherscan.io/)!\n\n# How does it work?\n\nMember Wall is a serverless application running a [NextJS](https://nextjs.org/) application on [Zeit](https://zeit.co/)'s infrastructure.\n\nFor each query, the application gets the list of members for one or more locks, by using [the Unlock Graph Protocol sub-graph](https://thegraph.com/explorer/subgraph/unlock-protocol/unlock).\n\nFrom there, we use [React](https://reactjs.org/) to generate a SVG image. This image is made of individual SVG images for each icon which reproduce [MetaMask](https://metamask.io/)'s Jazzicons.\n\nThe wall's size is \"fixed\" but can be customized and the size of each member is based on the number of members. Here's the list of our blog's members on a 30px height!\n\n![Members](https://member-wall.unlock-protocol.com/api/members?locks=0xB0114bbDCe17e0AF91b2Be32916a1e236cf6034F&maxHeight=30)\n\nOf couse, this is all [completely open source](https://github.com/unlock-protocol/member-wall), so you could easily run that on your own server, or maybe even host it on IPFS?\n\n# Embedding!\n\nOne of the benfits of decoupling the membership from the platform itself means that this can actually be embedded on any website. For example, we added this list of members to [our Github page](https://github.com/unlock-protocol/unlock/), so that everyone who makes a donation is instantly shown on the README, as soon as the transaction gets mined!\n\nWhere would you embed your members wall?\n"},{"title":"Ejecting an Unlock Account","subTitle":"Graduating with grace!","authorName":"Julien Genestoux","publishDate":"Nov 5, 2019","description":"Unlock accounts are regular Ethereum accounts. You can easily take it over and use it with your own web3 wallet!","image":"/static/images/blog/ejecting-account/ejecting.jpg","slug":"ejecting-account","content":"\n\n![Eject Unlock Account](/static/images/blog/ejecting-account/ejecting.jpg)\n\nA couple of weeks ago, we introduced the [Unlock User Accounts](/blog/unlock-user-accounts). These accounts behave exactly like any other web account, with an email and password. Yet, under the hood, they're actually powerful Ethereum wallets with a private key which can be used to send transactions, receive funds, or interact directly with any smart contract.\n\nIn the Ethereum world, an account is identified by a pair of cryptographic keys. The public key, also known as the user's address, is a way to **identify** someone, while the private key is used to **authenticate** that user. The cryptographic keys are \"self-sovereign\" which means that they do not require any 3rd party to be created, or to be used, unlike a regular account on a web applications, which requires this web application to exist. This is a very powerful mechanism which guarantees a permissionless usage.\n\nUnfortunately, this comes with a set of disadvantages. First: these keys are nearly impossible to remember, or even read and type! Their permissionlessness aspect also means that if someone forgets (or loses) them, no-one can help them... and they may be locked out of their account forever. Since the web was not built with such a system at its core, our muscle memory is not built around these concepts, which means that they're intimidating and foreign, but also require the use of tools that we're not familiar with, such as crypto wallets or browser extensions.\n\nOur user accounts are built as a convenience layer wrapped around Ethereum accounts. Users can create an account with just an email and password, like we're all used to, but they can also take over the internal Ethereum account when they're ready to level up. We call that process \"ejecting\"!\n\n## How to eject your Unlock account\n\nHead over to [your settings page](https://app.unlock-protocol.com/settings/). The relevant section is the last one. It's important to read the warnings as is a one way street: there is no going back. Once an account has been ejected, it's deleted from Unlock's servers and cannot be recovered anymore.\n\nIf you're ready, follow the instruction and download your private key. It's encrypted using your Unlock account password. If you kept that password secret, the file itself is fairly harmless, but don't lose it!\n\nNext, you need to install a web3 wallet. The most popular is [MetaMask](https://metamask.io/) and it works on Firefox or Chrome as well as on mobile devices. We'll take this one as an example, but you could also use [MyCrypto](https://mycrypto.com/) or several other ones.\n\nOnce you've installed MetaMask, choose a password to secure the extension. After this, click on the circle which represents your address. In the menu, select _Import Account_. Select the JSON file, and type your Unlock account's password. Submit the form and you'll be done!\n\n![Metamask Menu](/static/images/blog/ejecting-account/import.jpg)\n\nAt Unlock, we deeply believe that each web user should _own and manage_ their account in a decentralized way. We understand that this is a significant change from what we've been used to on the web, which is why we're providing user accounts, however, our hope is that every Unlock user eventually ejects!\n"},{"title":"Unlock Hackathon Ideas","subTitle":"Fun and useful ideas using the Unlock protocol.","authorName":"Sascha Mombartz","publishDate":"Nov 5, 2019","description":"We've put together a bunch of ideas for cool and fun projects that could be hacked on. Take the ideas, run with them, be inspired or do something completely different.","image":"/static/images/blog/hackathon-ideas/hero.jpg","slug":"hackathon-ideas","content":"\n\n![Ideas to hack on](/static/images/blog/hackathon-ideas/hero.jpg)\n\nWe’re going to be at ETHWaterloo over the first November weekend and we thought it would be fun to give participants some inspiration into what they could do with Unlock. Obviously we’re open to all ideas and we’d love to hear about them – the ones below feel free to steal, borrow, change or just be inspired about what's possible. If you need any design help, to mockup complex flow, icons, logos or have UX challenges feel free to find me (Sascha) – I’m happy to help.\n\n*   **Play with the Pros**<br />\nIf you’re a pro gamer you have lots of fans that  want to access to the game that you’re in. Working with Fortnite’s Custom Matchmaking capabilities create a way that will only allow fans who have bought a key join the game that you’re in.\n\n*   **GitHub Supporters**<br />\nAutomatically create an images of everyones profile pic/name/etc that is a supporter (and has a key) to show on Github README pages! [More on that here](https://unlock-protocol.com/blog/unlock-donations/).\n\n*   **Ad Free Podcast**<br />\nCreate a tool that lets members and key owners listen to podcasts without the ads by defining start and duration points of the ad in the audio file (and omitting it for members). Non-members can still listen but get the ads.\n\n*   **Lock Leaderboard**<br />\nList locks with the most keys sold, most revenue, newest, etc. Could this be done thru Graph Protocol queries? Could become a great way to discover new content.\n\n*   **Lock Bundling Idea**<br />\nLock bundling is a powerful tool to give key holders access to multiple publications or content types. Creating a permissionless multi publication revenue distribution would be very powerful. Or a simple way for creators to use each others locks so that members of one publication can get access to another publication.\n\n*   **Member Share**<br />\nFind a way to allow members to share one article thats behind a lock/paywall with a non-member.\n\n*   **Member Only Chat**<br />\nCreate an [app for rocket.chat](https://rocket.chat/docs/developer-guides/developing-apps/#what-is-a-rocketchat-app) (or telegram, slack, discord) that only allows paying members access to the chat or specific rooms. This could also be a bot that checks whether someone owns a key in a channel/room/group before allowing them to post or attend.\n\n*   **Gaming Prize Pools**<br />\nLocks are created for each gaming event, with users staking ETH, DAI, etc. to get a key in order to join the game. The winner of the game gets all the funds on the lock.\n\n*   **WordPress**<br />\nExtend the functionality of our [WordPress plugin](https://github.com/unlock-protocol/unlock-wordpress-plugin,). More on [our blog](https://unlock-protocol.com/blog/wordpress-plugin/) and in the [GitHub repo](https://wordpress.org/plugins/unlock-protocol/).\n\n*   **Video Subscription**<br />\nCreate a way to lock individual videos or playlists from youtube or vimeo. Videos could play a preview of a few seconds or only start after unlocking.\n\n*   **Shopify Discounts**<br />\nGive people who have keys to a certain lock access to discounts in your shop.\n\n*   **Early Access**<br />\nA service that lets members get early access to certain perks, like limited edition sneakers or concert tickets. For example fans could have a key for first dibs or ETHWaterloo participants get to buy tickets first for the next hackathon.\n"},{"title":"Unlocking Smart Contracts","subTitle":"Integrating Unlock-Protocol into your Smart Contracts","authorName":"Nick Mancuso","publishDate":"October 31, 2019","description":"Unlock value-added features directly in your smart contract. Trivial to implement with endless opportunities. We show you how and discuss some reasons why this might be interesting to you.","image":"/static/images/blog/unlocking-smart-contracts/code.jpeg","slug":"unlocking-smart-contracts","content":"\n\nSmart contract developers can integrate with Unlock Protocol on-chain, allowing you to monetize features by selling Keys.\n\nLet’s clear up a little terminology first. ‘Unlock Protocol’ allows you to create ‘Locks’ for specific content or features. Users can then purchase a ‘Key’ to gain access to that content. Keys may expire, allowing you to offer a monthly subscription option, and they are NFTs enabling a second hand market if you choose. We’re adding new features all the time.\n\n<p style=\"text-align:center\">\n\t<img src=\"/static/images/blog/unlocking-smart-contracts/code.jpeg\" width=\"400px\" alt=\"Smart contracts\">\n</p>\n\nFrom your smart contract, you simply call `getHasValidKey` on the Lock to see if the user should gain access.\n\nA simple example is unlocking a paid-only feature in your contract. Let me show you how…\n\n```\npragma solidity ^0.5.0;\n\nimport 'hardlydifficult-ethereum-contracts/contracts/interfaces/IPublicLock.sol';\n\ncontract PaidOnlyFeature\n{\n  IPublicLock public lock;\n\n  constructor(IPublicLock _lockAddress) public\n  {\n    lock = _lockAddress;\n  }\n\n  function paidOnlyFeature() public\n  {\n    require(lock.getHasValidKey(msg.sender), 'Purchase a key first!');\n    // ...and then implement your feature as normal\n  }\n\n  // You can also have free features of course\n}\n```\n\nPretty straight forward, right? Let’s step through it.\n\nFirst we need to install an NPM package with this command:\n\n```\nnpm i hardlydifficult-ethereum-contracts\n```\n\nNow we can review the code...\n\n```\nimport 'hardlydifficult-ethereum-contracts/contracts/interfaces/IPublicLock.sol';\n```\n\nImporting the interface allows us to make calls to the Lock contract, given its address.\n\n```\nIPublicLock public lock;\n```\n\nTo gain access, users must purchase a key to the Lock for this content. This stores the address for the Lock contract. By using `IPublicLock` instead of `address` we simplify making calls within the contract. `public` allows end-users to read the Lock’s address, confirming they are purchasing the correct Key.\n\n```\nconstructor(IPublicLock _lockAddress) public\n{\n  lock = _lockAddress;\n}\n```\n\nWe have to set the address for the Lock to use at some point. If you know it when this contract is deployed you can simply assign it in the constructor. However you might also consider a privileged call instead, allowing you to update the Lock in the future if needed. Here’s an example of a [MutableLock](https://github.com/unlock-protocol/unlock/blob/master/smart-contract-extensions/contracts/unlock-examples/MutableLock.sol).\n\n```\nrequire(lock.getHasValidKey(msg.sender), 'Purchase a key first!');\n```\n\n`getHasValidKey` checks if the given address owns a valid (unexpired) key and returns true or false. We place this in a `require` statement so that the entire transaction fails if they do not. If you prefer, this could be moved to a `modifier` instead. Alternatively you could use an `if` condition instead to modify behavior for Key owners somehow (we have a few ideas about that below).\n\nThat’s the contract implementation! The hardest part can be testing though. We need a way to run your contract locally, and to make calls with and without owning a Key. For this we have a script to get you started:\n\n```javascript\nconst { protocols } = require('hardlydifficult-ethereum-contracts')\nconst PaidOnlyFeature = artifacts.require('PaidOnlyFeature')\n\ncontract('PaidOnlyFeature', accounts => {\n  let lock\n  let featureContract\n  const keyOwner = accounts[3]\n\n  beforeEach(async () => {\n    lock = await protocols.unlock.createTestLock(\n      web3,\n      accounts[9], // Unlock Protocol owner\n      accounts[1], // Lock owner\n      {\n        keyPrice: web3.utils.toWei('0.01', 'ether'),\n      }\n    )\n\n    featureContract = await PaidOnlyFeature.new(lock.address)\n\n    await lock.purchaseFor(keyOwner, {\n      from: keyOwner,\n      value: await lock.keyPrice(),\n    })\n  })\n\n  it('Key owner can call the function', async () => {\n    await featureContract.paidOnlyFeature({\n      from: keyOwner,\n    })\n  })\n})\n```\n\nThis line does all the heavy lifting for you:\n\n```javascript\nlock = await protocols.unlock.createTestLock(\n  web3,\n  accounts[9], // Unlock Protocol owner\n  accounts[1], // Lock owner\n  {\n    keyPrice: web3.utils.toWei('0.01', 'ether'),\n  }\n)\n```\n\nIt deploys the Unlock Protocol, creates a Lock to use for testing, and returns a contract instance for interacting with the Lock… as shown with the `purchaseFor` line. With this you can now test as you normally would.\n\nIf you want to step it up a notch here are a few mays you might monetize your contracts with Unlock:\n\n- Unlock a discount on future transactions (or maybe make it free for key owners).\n- Unlock usage limits, such as defaulting to a free trial which enables 1 tx per day per account. Key owners unlock unlimited calls.\n- Unlock better odds, e.g. when rolling a DnD die key owners get +2 bonus on the roll.\n\nHere's a few [example-contracts](https://github.com/unlock-protocol/unlock/tree/master/smart-contract-extensions/contracts/unlock-examples) with both contracts and sample tests to help you get started.\n\nWant to do this for your smart contract? Get in touch we’d love to help you set it up: hello@unlock-protocol.com\n"},{"title":"Ethereum Name Service Support","subTitle":"We added support for Ethereum Name Service in the Unlock Dashboard","authorName":"Julien Genestoux","publishDate":"October 24, 2019","description":"Humans are not equiped to make sense of Ethereum addresses, the Ethereum Name Service makes it easy to recognize, remember and type addresses, in a fully decentralized way!","image":"/static/images/blog/ethereum-name-service/ethereum-name-service.png","slug":"ethereum-name-service","content":"\n\nIn the Ethereum ecosystem, accounts are identified by addresses. These addresses are public keys which all start with `0x` followed by 42 hexadecimal 'digits'. It's a great unique identifier for machines, but, for most people, it is impossible to read, remember, recognize or even just type!\n\nWallets provide tools like copy and paste, or QR codes to simplify the process of sharing an address. They also often add the ability to record an \"alias\" for addresses which should make it easier to identify previously recorded addresses.\n\nAnother approach is to use the [Ethereum Name Service](https://ens.domains/). This system, akin to the Domain Name System, lets people register names for their addresses, on chain. This allows other application and people to identify these addresses and show a human-friendly name instead of the long hexadecimal string.\n\nAt Unlock, we registered the `unlock-protocol.eth` name!\n\nOur Dashboard shows addresses in several places: to tell the user their current address (useful for people with multiple addresses), to show creators the addresses of their locks, as well as to list the key owners.\n\nWe're proud to announce that we now fully support the Ethereum Name Service! For every address displayed in the UI, if a reverse look up resolves to an existing ENS domain, we will show the ENS domain as you can see on the screenshot below!\n\n![Dashboard Lock](/static/images/blog/ethereum-name-service/ens-enabled.png)\n\nIf you have not done so already, think about [registering your own ENS domain today](https://app.ens.domains/)!\n\n\n\n\n\n\n"},{"title":"Tokenizing Memberships","subTitle":"What if there was a new way to interact with the communities you are part of?","authorName":"Julien Genestoux","publishDate":"October 18, 2019","description":"What if there was a new way to interact with the communities you are part of?","image":"/static/images/blog/tokenized-memberships.jpg","slug":"tokenizing-memberships","content":"\n\nThe web needs a [new business model](https://medium.com/unlock-protocol/its-time-to-unlock-the-web-b98e9b94add1) — one which doesn’t erode people’s privacy or centralize control into the hands of a few powerful entities.\n\nLuckily, the web is resilient, reliable, and really, really good at lots of things. Here’s one example: it’s great at creating communities.\n\nToday we’re all members of dozens of communities online, from the obvious ones like our own social circles or neighborhood groups, to the less obvious ones like the people we follow and the apps we use. For example, I read [Macbidouille](https://macbidouille.com) in my [feed reader](https://feedbin.com/) and use [Medium](https://medium.com/) on my phone as I commute: I’m an implicit member of those communities, even if I don’t wear a badge that says so.\n\nI’m even the creator of a few communities too. Admittedly they are small, but they are communities nonetheless. There are the people who follow me on [Twitter](https://twitter.com/julien51), for example, or the readers of [my blog](https://ouvre-boite.com), or those who watch [our work on Github](https://github.com/unlock-protocol/unlock/).\n\nAt Unlock, we want to help your participation in those communities — your memberships — mean something. We want to give you more control over them.\n\n> At Unlock, we want to help memberships materialize.\n\n![locks](/static/images/blog/tokenized-memberships.jpg)\n\n# What does that really mean?\n\nToday a lot of these memberships are locked inside proprietary databases: my Medium membership, my Twitter graph, or the Github stars on our repository.\n\nIn some cases, the membership is portable—my RSS feed reader allows me to export these subscriptions to another reader, for example. But often the membership is abstract or invisible: there is no easy way to represent “people reading my blog.” It’s very hard to turn these memberships into something anyone can see, let alone use.\n\nAnd that’s what it means to make them materialize.\n\n> We think that Unlock can make these memberships real. It can turn them into something reusable, programmable, and monetizable.\n\n# Membership as a token\n\nHow do you manage that? Well, you could build a service that keeps track in a huge database. That’s kind of what we have today across many of the large social media services. But it would have problems—it does have problems. There is a single point of failure, it’s not interoperable by default, and whoever manages it can arbitrarily change how it works. It’s not very web-like, and it’s not acceptable.\n\nFortunately it doesn’t need to work that way any more. We now have fully permission-less, distributed, and unstoppable databases: blockchains. The most famous one, Bitcoin, provides a secure ledger for its own currency. But there are many others out there too, storing data—what we call tokens—for everything from money, like [DAI](https://makerdao.com/en/dai/), to gaming items like [CryptoKitties](https://www.cryptokitties.co/). (These are what we call [Non Fungible Tokens](https://unlock-protocol.com/blog/non-fungible-tokens-betaworks/).)\n\n> We think tokens can be used to represent memberships.\n\n# What happens then?\n\nOnce a membership is a token, you can do lots of interesting things with it. For example, the fact that I’m a paying member of Medium could be re-used by another application to grant me access to some kind of exclusive preview. Medium doesn’t need to give permission for that to happen.\n\nIf you push that a bit further, when several creators put the same lock on their work, they have created a bundle: a single key can unlock content or features in a lot of different places, and they can then split revenues in any way they want.\n\nThe keys themselves can have multiple purposes: the fact that you follow Unlock’s Github account could mean you automatically get invited to our launch party. And, if it’s a token, it doesn’t matter whether Github decides to suddenly remove its ⭐️ feature: tokens mean you would still be a member of our loyal developer community.\n\nYou could also use these tokens to transfer memberships to somebody else, or even to burn the membership itself.\n\n# It’s not (just) about the money\n\nMemberships are powerful things. They can be about social status, showing support, or just belonging. And they can include financial elements too. Many people proudly show their love for a brand by showing the logos on their clothes, their cars, their laptop. Non-profits realized a long time ago that getting somebody to wear a colored ribbon 🎗 was sometimes as powerful as getting a donation from them. And sports teams are already experts at monetizing their relationships with members by selling hats, jerseys, and gear with the club colors.\n\nBecause Unlock is underpinned with the Ethereum blockchain, it means that payment is already built into the infrastructure: the currencies, the wallets, and the exchanges already exist to make it easy for members to purchase or sell their memberships.\n\nMonetizing through Membership is a much better alternative than monetizing through attention. By becoming a paid member, the consumer makes an explicit choice about what kind of community they want to be part of, what kind of work they want to promote, rather than being passively pulled away from things that matter.\n"},{"title":"Linkdrop: granting keys through links!","authorName":"Julien Genestoux","publishDate":"October 9, 2019","description":"Linkdrop provides a simple mechanism which lets anyone create links to \"claim\" keys for free!","image":"/static/images/blog/linkdrop/linkdrop.png","slug":"linkdrop","content":"\n\nIn the blockchain world, one of the most potent distribution mechanisms is called **an airdrop**. It is a way for token creators to send their tokens to a large set of people, without requiring these recipients to perform transactions and pay fees themselves. Unfortunately it is often used as a vector for spam even though it is a very useful tool to boostrap a fairly wide adoption.\n\nAt Unlock, [we believe](/blog/mission-vision/) that all creators should make a sustainable living from their work, while respecting the time, privacy and health of their community... and spam does not really fit in this vision!\n\nAdditionally, when talking with creators, they often mention that they want to give away some access keys to their most loyal fans or others members of their community as a way to thank them for their contributions. Of course, our smart contract already includes a `purchaseFor` method which anyone can invoke in order to purchase a new key and assign it to someone else. In the Ethereum world, this is akin to a \"meta transaction\", a transaction whose beneficiary is not its sender.\n\nUnfortunately, this function, `purchaseFor` requires the purchaser to know the recipient's Ethereum address in advance which is not always practical. Luckily, the team at [LinkDrop](https://linkdrop.io/) found a very good way to solve this: they created a system which lets anyone _create links_ with attached keys. The first user who clicks on a link can then claim a unique key for it. This way, someone who wants to give away keys to a lock can easily do so by creating droplinks which they would then send to users by email, social networking, or even for promotional events.\n\nWant to try it out? Here are 5 links which include keys to this blog:\n1. [Linkdrop 1](https://unlock.linkdrop.io/#/receive?weiAmount=100000000000000&tokenAddress=0x0000000000000000000000000000000000000000&tokenAmount=0&expirationTime=12345678910&version=1&chainId=1&linkKey=0x826a1830f35b9c932ee214d40959f5279cdac4a5e94b3c0cef40001b8d63d9aa&linkdropMasterAddress=0x6C0F58AD4eb24da5769412Bf34dDEe698c4d185b&linkdropSignerSignature=0xbabb6eef79f840c45101ac3385b4452dac0b60fff73cb5ebccf381d26f4567ee08b4d4fd0642599e07eea24d374961d0fb77f19acef544d9f2f2bf3cd0df284d1b&campaignId=0&lock=0xB0114bbDCe17e0AF91b2Be32916a1e236cf6034F&article=https%3A%2F%2Funlock-protocol.com%2Fblog%2F)\n2. [Linkdrop 2](https://unlock.linkdrop.io/#/receive?weiAmount=100000000000000&tokenAddress=0x0000000000000000000000000000000000000000&tokenAmount=0&expirationTime=12345678910&version=1&chainId=1&linkKey=0xdda46e4ad8b782302ee00b4859dbc42a82f887b3ad57a407b9ac2cd6d58444eb&linkdropMasterAddress=0x6C0F58AD4eb24da5769412Bf34dDEe698c4d185b&linkdropSignerSignature=0xacfeb8d442798219d762c5aba79bdf95ba21bcc10e1a6eeb08fb192cf4b695d615193feccdcd497d1b8c864f264835429f78861e169177e9226395a7d07ee94d1c&campaignId=0&lock=0xB0114bbDCe17e0AF91b2Be32916a1e236cf6034F&article=https%3A%2F%2Funlock-protocol.com%2Fblog%2F)\n3. [Linkdrop 3](https://unlock.linkdrop.io/#/receive?weiAmount=100000000000000&tokenAddress=0x0000000000000000000000000000000000000000&tokenAmount=0&expirationTime=12345678910&version=1&chainId=1&linkKey=0x50cb9777a62ac97fc7827f0205eea56601b560b8c96c0b476a23ea3de7909111&linkdropMasterAddress=0x6C0F58AD4eb24da5769412Bf34dDEe698c4d185b&linkdropSignerSignature=0x8eed63b88a3c0883abff8f9e3e7ebf3bf7c09d08abb19e89fd094679accc352a2e14372a2667a74c9cc57df76270cfe0de46421b24576790efde7161713360ec1c&campaignId=0&lock=0xB0114bbDCe17e0AF91b2Be32916a1e236cf6034F&article=https%3A%2F%2Funlock-protocol.com%2Fblog%2F)\n4. [Linkdrop 4](https://unlock.linkdrop.io/#/receive?weiAmount=100000000000000&tokenAddress=0x0000000000000000000000000000000000000000&tokenAmount=0&expirationTime=12345678910&version=1&chainId=1&linkKey=0x63af75b48f6dd45678ba08dcfc6b266be56198f80ee0a86c9cda9cba8598ee56&linkdropMasterAddress=0x6C0F58AD4eb24da5769412Bf34dDEe698c4d185b&linkdropSignerSignature=0x3bfb5be7648b5af77a134a4223a2f85f8c75c8091c71407d1c6076974eb283437cc0a31c9db219585efa1c9024c9df2a07e54f68e421d700c077ca0046fbe2921b&campaignId=0&lock=0xB0114bbDCe17e0AF91b2Be32916a1e236cf6034F&article=https%3A%2F%2Funlock-protocol.com%2Fblog%2F)\n5. [Linkdrop 5](https://unlock.linkdrop.io/#/receive?weiAmount=100000000000000&tokenAddress=0x0000000000000000000000000000000000000000&tokenAmount=0&expirationTime=12345678910&version=1&chainId=1&linkKey=0x13cc25c7fa22354db7ebc1bdcfe24226c2b1d279b843d96f409812bd74ff08c2&linkdropMasterAddress=0x6C0F58AD4eb24da5769412Bf34dDEe698c4d185b&linkdropSignerSignature=0xa6663cbca6a23e8ca2bec4354320cb73f547bd6abddaf71e9aa2a1afb22c15c573e5dea4f05187db1919f33f74bdcd001781c07eb8f20ab557d48bcd30a4da741c&campaignId=0&lock=0xB0114bbDCe17e0AF91b2Be32916a1e236cf6034F&article=https%3A%2F%2Funlock-protocol.com%2Fblog%2F)\n\nIf all links have been claimed, please reach out in our [Telegram group](https://t.me/unlockprotocol), as we have more links to share ;)\n\nFor which lock would you want to generate links? You can easily [use Linkdrop's tutorial](https://github.com/LinkdropHQ/linkdrop-unlock)!\n"},{"title":"ETHWaterloo Tickets","subTitle":"We're proud to announce that ETHGlobal is using Unlock's ticket application for its ETHWaterloo hackathon, for crypto and non crypto users alike!","authorName":"Julien Genestoux","publishDate":"October 2, 2019","description":"We're proud to announce that ETHGlobal is using Unlock's ticket application for its ETHWaterloo hackathon, for crypto and non crypto users alike!","image":"/static/images/blog/ethwaterloo-tickets/ethwaterloo.png","slug":"ethwaterloo-tickets","content":"\n\n[ETHGlobal](https://ethglobal.co/) runs Ethereum hackathons all around the world for people to learn and practice their Ethereum coding skills. One of their goals is to \"onboard\" hackers and engineers who are not yet familiar with Ethereum and don't already have a wallet or Ether. Yet, they rightfully live by their words and insist on using [Ethereum powered tickets](https://unlock-protocol.com/blog/introducing-tickets/)! By adding [user accounts](https://unlock-protocol.com/blog/unlock-user-accounts/) to our tickets app, Unlock is excited to deliver a great on-boarding experience! Here is how it works:\n\n1. A hacker who's never used Ethereum before applied and was accepted for [ETHWaterloo](https://ethwaterloo.com/)!\n2. They're sent to our [registration page](https://bit.ly/2ozn9iI). **Note: do NOT purchase a ticket if you have not been previously approved. Your funds will be lost and you will not be able to attend.**\n\n![Event Page](/static/images/blog/ethwaterloo-tickets/event-page.png)\n\n3. When clicking on the registration button, they're asked to pay 20 DAI which they does not have because they does not have a wallet. But, when clicking on the Purchase button, they're asked to login or sign up.\n\n![Sign in](/static/images/blog/ethwaterloo-tickets/sign-in.png)\n\n4. After they created their account with email, password and credit card information, they're asked to pay with their credit card! Unlock will keep track of their unique Ethereum address.\n\n![Credit card](/static/images/blog/ethwaterloo-tickets/credit-card.png)\n\nOnce they confirm their credit card payment, Unlock will then perform a meta-transaction and pay the 20 DAI on their behalf so that the NFT is then assigned to their address.\n\n# Refunding attendees\n\nWhen attending an ETHGlobal hackathon, all participants are refunded: the payment is an incentive for people to show up! It's also very useful for these new-to-Ethereum users because the refund actually happens in crypto: each participants who checks in at the venue (more details soon!) will receive a 20DAI refund to their address.\n\nAdditionally, Unlock accounts can be \"ejected\": during that process, the user can take control of their private key, and import it in the wallet of their choice: **they are now full Ethereum users**!\n\n# Frequently Asked Questions\n\n### Why is Unlock charging me $21.40?\n\nWhen paying with a credit card, our payment processor takes a fee (30cts + 2.9%) which is used to pay the credit card networks, banks and more; this accounts for $0.90. Additionally, when sending an Ethereum transaction, the sender pays a gas fee to miners in order to mine the transaction.\n\n### Can I purchase with my own Ethereum wallet?\n\nYes! If you go down that route, you will not pay a credit card fee, and you will have the ability to decide the gas fee you pay to miners. But, in order to do that, you need your own web3 wallet (Metamask or Opera are great choices!), you need some Ether (at least to pay gas fees) and some DAI (a USD stable coin).\n\n### Where is my ticket?\n\nOn the Ethereum blockchain! Each ticket is a Non Fungible Token linked to your unique Ethereum address and to the ETHWaterloo event lock. You can inspect them all using Etherscan. Additionally your ETHWaterloo tickets contains some unique metadata. If your crypto wallet supports the ERC721 specification (like Opera), you can even see the ticket in your wallet once it's been purchased! Otherwise you can see them all on Opensea. ([Here is mine!](https://opensea.io/assets/0xB0ad425cA5792DD4C4Af9177c636e5b0e6c317BF/4))\n\n### How can I get a refund when I attend?\n\nAt check-in, you will be asked to show the QR code you were provided by Unlock when you staked. You can always find your QR code by logging back in to your Unlock Protocol account. Simply have your email confirmation from Unlock handy and show event organizers your QR code. Once scanned at check-in, your refund will be processed. Please note that the exact timing of when your funds will appear back in your wallet depends on the transaction speeds of the Ethereum mainnet at the time. **Bottom line: if you check-in to the event prior to 10PM Friday November 8th, you'll receive your 20 DAI refund!**\n\n### Can I transfer my ticket?\n\nNo. Actually, all Unlock keys (your ticket is a kind of Unlock key) are transferable, but each lock owner can set terms on how keys can be transferred. ETHGlobal charges a prohibitively expensive fee for transfers, making them economically improbable ;) Bonus point if you write the actual amount of that fee in the comments!\n\n\nWe're very excited to meet you in Waterloo, as our team will be there! If you've never hacked on Ethereum before, [please consider applying now](https://airtable.com/shrrUrSEzT4xrYuyC)!"},{"title":"The Graph","subTitle":"Leveraging the Graph Protocol to improve user experience and rapidly iterate on ideas","authorName":"Akeem Adeniji","publishDate":"September 25, 2019","description":"Using the Graph Protocol for faster iteration on Ethereum based products","image":"/static/images/blog/the-graph-blog-post/thegraphlogo.png","slug":"the-graph-blog-post","content":"\n\nWe've started using [The Graph](https://thegraph.com/) to provide us with a faster way of iterating on user facing ideas; leveraging the ability to utilized aggregated on chain data.\n\nEarlier this month while hacking on a proof of concept, we realized that we couldn't reasonably bring the feature to market without an aggregation layer.\n\nEnter Graph Protocol, while being released last year(2018) we really hadn't had a chance to give it a go. When their team announced a [hackathon](https://thegraph.com/hackathon) we decided to dive in and were not disappointed.\n\nBeing an extremely small team, ingestion solutions under consideration needed to be robust enough to handle our immediate needs, easily extensible, and not an immediate liability in terms of reliability.\n\nUnlock Protocol is essentially a factory smart contract that allows entities to create their own contracts; supporting the monetization of their work via issued tokens.\n\nAround these core contracts we have built a suit of components to test hypothesis regarding interest and usability. Ethereum's test and main nets are publicly readable, and depending on the given use case it may be worthwhile to request data from the node directly. However it maybe more prudent to read from a much faster cache. So we created a subgraph allowing us to quickly provided the most relevant data to our proof of concept and ultimately update some of our other components to leverage the subgraph as well.\n\n## Our entities: Locks, Keys, and Key Holders \nLeveraging these entities and your knowledge of [GraphQL](https://graphql.org/) you can start answer questions like\n\n- what keys does a key holder have?\n- For a given lock, what keys will expire after a given time?\n\nHere is a few to get started:\n[The Unlock Protocol Subgraph](https://thegraph.com/explorer/subgraph/unlock-protocol/unlock)\n\n```json\n{\n    keyHolders(where : {address: \"0x3CA206264762Caf81a8F0A843bbB850987B41e16\"}){\n        keys{\n            lock{\n            address\n            name\n            }\n            keyId\n        }\n    }\n}\n\n```\n\n```json\n{\n  locks(where: {address: \"0xB0114bbDCe17e0AF91b2Be32916a1e236cf6034F\"}){\n    name\n    address\n    keys(where: {expiration_gt: 1566791565 }){\n      expiration\n    }\n  }\n}\n```\n\nReal talk, so what was the proof of concept and what did we build? We built a keychain, a centralized place where people can manage their Unlock KEYS (Nonfungible Tokens ): review, request refunds, etc.\n\n![keychain screenshot](/static/images/blog/the-graph-blog-post/screenshot.png)\n\nWithout a caching layer, requesting this data would have been a bit I/O intensive as it would require the traversal either events or transactions between the user and all of the the locks in the wild.\n\nAll in all, we love what the Graph Protocol team is working on. We look forward to contributing the the project and leveraging it more in the future.\n\nWhat other use cases do you imagine, what would you build?\n"},{"title":"Unlock User Accounts","subTitle":"Providing an on-ramp for those who are new to crypto","authorName":"Christopher Nascone","publishDate":"September 17, 2019","description":"Unlock Inc. provides a way for users without crypto wallets to buy keys to locks on the Unlock protocol. For this we introduce managed user accounts as well as payment via Credit Card.","image":"/static/images/blog/unlock-user-accounts/user-accounts.jpg","slug":"unlock-user-accounts","content":"\n\n![User accounts let you easily pay with crypto.](/static/images/blog/unlock-user-accounts/user-accounts.jpg)\n\nThe decentralized web is great, but we want it to be available for those who aren't early adopters. Currently interacting with Dapps like Unlock requires the use of a Web3 wallet (like [MetaMask](https://metamask.io/) on desktop web browsers or the use of a browser with an integrated wallet like [Opera](https://www.opera.com/crypto)). At Unlock we want to provide an on-ramp for everyone, not just those already interested in crypto. Thus, we are pleased to introduce Unlock User Accounts, which allow people with no knowledge of crypto to use our services on selected locks. Once they're ready, they can \"eject\" their accounts and import them into the wallet of their choice.\n\n## A Managed Crypto Wallet\n\nWe didn't want to create parallel ecosystems of \"haves\" and \"have-nots\" on our protocol, so one of our key challenges was to host Web3 wallets for our users without compromising their privacy or control of their keys. To that end, we store an <strong>encrypted wallet</strong> with the user's password. We never see the keys, all decryption and wallet interaction is done client-side, and their transactions are carried out on the chain. When a user purchases a key, they pay with their credit card, and our backend purchaser buys the key and transfers it to their account seamlessly.\n\n## Signing Up and Logging In\n\nThe signup process is quite simple. You can sign up from a supported checkout page, or on our main site. After entering your email, you will receive a confirmation email from us with a link to finish setting up the account with a password. After that, you can set up a payment method through Stripe so that you can make your key purchases!\n\nTry it out from this [dummy publisher page](https://paywall.unlock-protocol.com/newdemo/?lock=0xa4DAF4712EC7D37B15E2b8ad090710fa4dFb8977&unlockUserAccounts=true), but make sure you do so from a web browser which does not have a web3 wallet already ;)\n\n## In The Longer Term\n\nWe're not fans of lock-in, so don't think that this is an attempt to get hooks into naive users. When a user account is ready to \"graduate,\" the account holder can eject the account and take control of it themselves, retaining all their keys and transaction history.\n\n## Availability\n\nWe're enabling user accounts for our partners on select locks (reach out to us using the little widget in the lower right corner if you're interested!), keys for which are denominated in DAI (a USD stable coin). We charge a small fee to facilitate the transaction, which is added to the price at checkout and clearly broken down so people know what we're charging and why. The final price in dollars is computed as the amount of DAI, credit card fees, and our service fee (which we use to pay for gas!)\n\nFor example, consider a 10 DAI lock. The fee structure will be approximately as follows:\n\n| Fee                         |  Amount Charged |\n| :-------------------------- | --------------: |\n| Base lock price (DAI)       |        `$10.00` |\n| Credit card processing fee  |         `$0.61` |\n| Unlock service fee (gas...) |         `$0.50` |\n|                             | Total: `$11.11` |\n\nYou may (rightfully) consider that this is a fairly high cost for using credit cards... but that price is usually hidden for you, as the merchants are the ones paying for it.\n\n# Next!\n\nWe believe we're now providing a way for non crypto users to purchase Non Fungible Tokens to access their favorite content or software, without requiring them to go through the hassle of purchasing crypto currencies first.\n\nLet us know what you think!\n"},{"title":"Wordpress Plugin","subTitle":"Adding a lock to your WordPress.org website has never been easier!","authorName":"Julien Genestoux","publishDate":"September 11, 2019","description":"Wordpress.org is the most popular Content Management System. Adding a lock to your site lets you monetize the words you write without asking anyone's permission!","image":"/static/images/blog/wordpress-plugin/unlock-wordpress.jpg","slug":"wordpress-plugin","content":"\n\n![Introducing the Unlock WordPress plugin.](/static/images/blog/wordpress-plugin/unlock-wordpress.jpg)\n\nThe world of publishing is [moving away from ads](https://medium.com/unlock-protocol/the-end-of-the-ad-supported-web-d4d093fb462f) as the single way to monetize content. In the last 18 months, most of the largest and most influential publications in the US and Europe have been moving to what they call \"direct consumer revenue.\" This is a great thing because it changes incentives from trying steal their users' attention (click bait, fake news, endless slideshows... etc) to creating value for their members.\n\nUnfortunately though, unless you're a very large publisher with your own engineering team to build and maintain your own paywall, it's nearly impossible to move to that model.\n\nAt Unlock, we believe that everyone one the web should be treated equally with the same capabilities. What is the point of democratizing publishing if only the biggest corporations can actually be paid for their work?\n\nToday, we're introducing a [WordPress plugin for Unlock](https://wordpress.org/plugins/unlock-protocol/) which lets you add a lock to your Wordpress.org site in minutes!\n\n# Demo\n\nFirst thing first: you can try it today on our [demo wordpress.org website](https://wordpress-demo.unlock-protocol.com/). This blog only has a single story, and some of the content on this page has been put behind a [lock](https://etherscan.io/address/0xb0114bbdce17e0af91b2be32916a1e236cf6034f): you will see a different version of it based on whether you are already a member or if you're not one.\n\n![become member](/static/images/blog/wordpress-plugin/become-member-wordpress.png)\n_If you're not a member you're invited to become one by clicking on a button_\n\n# Installing on your own Wordpress\n\n## Getting started\n\nIf you'd like to add a lock to your site, start by [deploying your first lock](https://unlock-protocol.com/blog/create-first-lock/).\n\nWhile the lock is deploying you should install this plugin. From the administration of your Wordpress.org website, in the `Plugins` section, click on the `Add New` button and search for `Unlock Protocol` in the search bar.\n\n![search plugin](/static/images/blog/wordpress-plugin/search-plugin.png)\n\nOnce installed, check the plugin's settings to add the address of the lock that you have deployed.\n\n![plugin settings](/static/images/blog/wordpress-plugin/plugin-settings.png)\n\n## Writing locked stories\n\nThe plugin provides you with \"Blocks\" which can be used in the [Gutenberg Editor](https://wordpress.org/gutenberg/) (WordPress 5.0 and later), for both posts and pages. We provide 3 different blocks:\n\n- The _locked_ block: a block whose content (rich text) is visible to non-members.\n- The _unlocked_ block: a block whose content (rich text) is visible only to members.\n- The _checkout button_ block: a block with a button to let you add a button for people to become members. This button will not be visible for members.\n\nOnce your story includes the content you need, you can preview its content like any other WordPress post or page. We recommend the use of a web3 wallet (such as [MetaMask](https://metamask.io/)) which supports multiple accounts so that you can easily toggle between accounts which are already members and accounts which are not members yet!\n\nPS: like [all of our code](https://github.com/unlock-protocol/unlock/), this plugin is fully open source, you can find it on Github: [Unlock Wordpress Plugin](https://github.com/unlock-protocol/unlock-wordpress-plugin)\n\nIf you're using the WordPress plugin, we'd love to get your feedback and learn from you about ways it could be better! We're also working on several new additions for which we'd love to find early adopters, please get in touch!\n"},{"title":"Event Sponsorship!","subTitle":"Use our tickets application and receive up to $3,000 in sponsorships!","authorName":"Julien Genestoux","publishDate":"September 3, 2019","description":"Today, we're excited to announce a broad sponsorship effort for anyone who uses tickets to organize an Ethereum or Bitcoin related event for any event until December 31st 2019.","image":"/static/images/blog/sponsorship-events/ticket-sponsoring.jpg","slug":"tickets-sponsored","content":"\n\nLast month, we introduced [Unlock for tickets](/blog/introducing-tickets): a unique ethereum based ticketing application.\nIt lets anyone sell tickets to their events as keys to an Unlock lock. Attendees receive a unique Non Fungible Token and [the application](https://tickets.unlock-protocol.com/) even lets the organizers verify if the tickets are valid at check-in. Like any other lock, keys can be priced [using an ERC20 token](/blog/erc20-locks) like DAI for organizers whose costs are in US Dollars, or a specific utility token for organizers who want to leverage their own coins!\n\nToday, we're excited to announce a broad sponsorship effort for anyone who uses tickets to organize an Ethereum or Bitcoin related event for any event until December 31st 2019.\n\nOur sponsorship package is simple:\n\n- Use a lock to sell tickets, using Ether or DAI,\n- We will match ticket sales up to 3 DAI per key sold, for up to 1,000 tickets sold.\n\nWe will also help you by _promoting your event_, guide you through the set-up of your event page as well as _design a custom NFT image_ that all of your participants will receive in their web3 wallet (check this one from the [Berlin Open Source Salon](https://tickets.unlock-protocol.com/event/0x98c0cbf0e9525f1a6975a51c9d5e8e063c034d6d), or the [NFT Dev Meetup](https://tickets.unlock-protocol.com/event/0x5865Ff2CBd045Ef1cfE19739df19E83B32b783b4)).\n\nIf you're running an ethereum meetup, a DeFi group, a hackathon, reach out to us via email hello@unlock-protocol.com and tell us more about the event you're organizing: we'd love to help!\n"},{"title":"Unlock Donations","subTitle":"Easily add a sponsorship button to your Github repository, using Unlock!","authorName":"Julien Genestoux","publishDate":"August 26, 2019","description":"A sponsor or a donor is a member of a unique club; the club of people and organizations which help someone do their work \"for free\" for the rest of the world. Unlock can easily be used to create sponsorships!","image":"/static/images/blog/unlock-donations/supporting-member.jpg","slug":"unlock-donations","content":"\n\nToday, we're excited to unveil our work on donations. In the last few years, it has become clear that the tech industry needs to have a deep reflection about Open Source: who works on it, how they are being paid, who supports them... Companies like [OpenCollective](https://opencollective.com/) have laid the groundwork by providing tools for open source developers to raise funds and organize their work. Earlier this year, Github [introduced sponsorship support](https://github.blog/2019-05-23-announcing-github-sponsors-a-new-way-to-contribute-to-open-source/) for repositories; letting maintainers show options to support them.\n\n![sponsor unlock](/static/images/blog/unlock-donations/sponsor-unlock.png)\n*Become a member to Unlock from Github, and Unlock comments in this blog!*\n\nAs you may know, Unlock is a **protocol for memberships**. A sponsor is a member of a unique club: the club of people which help someone do their work \"for free\" for the rest of the world. Today, with a [simple tool](https://donate.unlock-protocol.com/about.html), creators can easily use their locks to raise funds for their work and create their own membership.\n\n# More than money\n\nOf course, supporting Open Source works _starts_ with financial support, but it does not stop there. With Unlock, members receive their very own Non Fungible Token (a key!) which publicly shows their support (and reminds them of it in their own crypto wallets!). You can find the list of keys I own on [this OpenSea page](https://opensea.io/accounts/0xe5cd62ac8d2ca2a62a04958f07dd239c1ffe1a9e).\n\nOne of the benefits of using Ethereum here rather than a private database is that these tokens can be utilized in additional context, such as being displayed anywhere like [our blue checkmark](https://unlock-protocol.com/blog/blue-checkmark-nft/)!\n\nLike any non fungible tokens, a supporter may also change their mind, and could either burn their token or transfer it to someone else.\n\nAdditionally, the membership itself can be reutilized to eventually grant access to additional features. As Taylor from MyCrypto puts it in their [Unlock donation page](https://donate.unlock-protocol.com/?thank-you=VGhhbmsgeW91IGZvciBjaG9vc2luZyB0byBiZSBhIE15Q3J5cHRvIHN1cHBvcnRlciEg4p2k77iPCgpBdCB0aGlzIHRpbWUsIHlvdXIgc3VwcG9ydCBpcyBhIHNpbXBsZSBkb25hdGlvbiB0aGF0IGhlbHBzIHVzIGNvbnRpbnVlIHdvcmtpbmcgdG8gYnJpbmcgeW91IHByb2R1Y3RzLgoKSW4gdGhlIGZ1dHVyZSB3ZSdsbCBiZSBmdXJ0aGVyIGRldmVsb3BpbmcgdGhpcyBmdW5jdGlvbmFsaXR5IHdpdGggdGhlIFVubG9jayBQcm90b2NvbCB0ZWFtIHRvIHJld2FyZCBzdXBwb3J0ZXJzIHdpdGggdGhpbmdzIGxpa2UgY3VzdG9tIHRoZW1lcywgc3dhZywgYW5kIG1vcmUuCgotVGF5bG9yICYgVGVhbSBNeUNyeXB0bw==&config=eyJwZXJzaXN0ZW50Q2hlY2tvdXQiOnRydWUsImljb24iOiJodHRwczovL2Fzc2V0cy51bmxvY2stcHJvdG9jb2wuY29tL3RtcC9teS1jcnlwdG8ucG5nIiwiY2FsbFRvQWN0aW9uIjp7ImRlZmF1bHQiOiJTdXBwb3J0IHRoZSBNeUNyeXB0byB0ZWFtIGFuZCB1bmxvY2sgeW91ciBtZW1iZXJzaGlwIHRvZGF5IVxuXG5Zb3UgY2FuIG1ha2UgYSBkb25hdGlvbiBieSBwdXJjaGFzaW5nIGEga2V5IHVzaW5nIHlvdXIgRXRoZXJldW0gd2FsbGV0LiBUaGUga2V5IGlzIGEgbm9uIGZ1bmdpYmxlIHRva2VuIHdoaWNoIHJlcHJlc2VudHMgeW91ciBtZW1iZXJzaGlwLiAifSwibG9ja3MiOnsiMHgxNGU4MTE5NmU2MGIxMjg1MjdkYjAzZDQwYmRiYTAwNzEwNzc3ODA1Ijp7Im5hbWUiOiJNeUNyeXB0byBNZW1iZXJzIn19fQ==&):\n\n\n> Thank you for choosing to be a MyCrypto supporter! ❤️\n\n> At this time, your support is a simple donation that helps us continue working to bring you products.\n\n> In the future we'll be further developing this functionality with the Unlock Protocol team to reward supporters with things like custom themes, swag, and more.\n\n> -Taylor & Team MyCrypto\n\n\n# Getting started\n\nJoin [MyCrypto](https://github.com/MyCryptoHQ/mycrypto), [WalletConnect](WalletConnect) and [Eth Gas Reporter](https://github.com/cgewecke/eth-gas-reporter) and receive donations on Github with Unlock! Let's get started.\n\n* The first step is to [deploy your first lock](https://unlock-protocol.com/blog/create-first-lock/). We'd recommend starting with a low price (1 DAI) and short duration (30 days), as well as maybe a limited number of members (100!). These early adopters will probably be your biggest fans! You can also, now or later, add another more expensive lock for other members.\n\n* Then, hop onto our helper page to generate the right configuration for the donation page. You can pick an URL, set up your own call to action, as well as a thank you note that members will be able to see. Add the lock address from the previous step, as well as its name. Once generated you will see a JSON blob that you need to save as file named <code>.unlock-protocol.config.js</code> at the root of your Github repository.\n\n* Once it is saved, you need to head over to your project's settings pages. In the \"Features\" tab there should be a \"Sponsorship\" section. Make sure it is enabled. ![enable sponsorship](/static/images/blog/unlock-donations/enable-sponsorship.png)\n\n* After enabling sponsorships, click on the \"Set up sponsor button\". This will let you edit a file named `.github/FUNDING.yml` which can also be found in your repository. Replace the last line with Make sure to change `<ORG>/<REPO>` with the actual values for your own repository (you can also certainly use a user repository instead of an organization). <br> `custom: https://donate.unlock-protocol.com/?r=<ORG>/<REPO>`\n\n\nWe'd love to know if you added a sponsorship button through Unlock. Please, let us know in the comments below, maybe we'll become members too!\n\n"},{"title":"A blue check-mark NFT","subTitle":"A fun experiment to show how Non Fungible Tokens can be used to represent badges!","authorName":"Julien Genestoux","publishDate":"August 23, 2019","description":"Locks are the core of the Unlock protocol. They are smart contracts deployed on the Ethereum chain which lets your community become members by purchasing keys to your lock.","image":"/static/images/blog/blue-checkmark-nft/twitter-verified.jpg","slug":"blue-checkmark-nft","content":"\n\nTwitter's blue checkmark has generated a lot of attention over the years. This week, Ethereum's Vitalik Buterin rightfully [noted](https://twitter.com/VitalikButerin/status/1164490401765572611) that the blue checkmark was a status symbol. Last week-end, [Dani Grant](https://twitter.com/thedanigrant) released a [fun Chrome extension](dani.town/nfts) which will show a Twitter users' NFT on their twitter profile.\n\nYesterday, we deployed a lock which lets anyone purchase a Blue Checkmark. [Get yours now](https://unlock-blue-checkmark.glitch.me/). It's cheap: 0.01 ether and we'll donate the proceeds to SHE256. Also, Dani was kind enough to merge a [pull request](https://github.com/danigrant/nft-twitter-ext/commit/d81615e05f902ec67db09d638a0e1b8eac160fd0) on her extension so that if someone owns the NFT blue checkmark, it will actually show on their Twitter profile ;)\n\n![Dani, Verified](/static/images/blog/blue-checkmark-nft/dani-verified.png)\n\n\nAt Unlock, we believe that Non Fungible Tokens can be badges to show \"membership\", and yes, the Twitter Checkmark is an identifier for, as Vitalik calls it _the blue checkmark class_.\n\nIt turns out that Twitter's system is very much broken right now. Nobody knows what it really means to have a checkmark but we can't argue that in the days of deep fakes, having some kind of \"labels\" on the social web is a very useful pattern to identify people (or bots!) based on their affiliations for example.\n\n\nOur Blue Checkmark Lock is obviously a joke and a fun experiment, but it shows the power of NFT which exist \"outside\" of the space for which they're created. Using Non Fungible Tokens, rather than records on Twitter's databases means that other applications could re-use these labels and maybe expand them. For example, wouldn't it be useful for Github to show some of the tags from StackOverflow? I'd love [my RSS creds](https://stackoverflow.com/help/badges/4540/rss?userid=73987) to be visible on my Github profile!\n\n\nWhat other kinds of memberships would you want to see represented as Non Fungible Tokens?"},{"title":"Unlocking Scout","subTitle":"Our friends at Scout have integrated Unlock on the Unlock dashboard. Here's how it works","authorName":"Julien Genestoux","publishDate":"August 18, 2019","description":"Our friends at Scout have integrated Unlock on the Unlock dashboard. Here's how it works","image":"/static/images/blog/unlocking-scout/scout-cool.png","slug":"unlocking-scout","content":"\n\nUnlock is a protocol for memberships. Members of a given community often have access to perks, content or features which are just for them. For example, members (and only them!) of our blog can read and leave comments.\n\n# Scout\n\nToday, we're very excited and proud to announce that our friends at [Scout](https://scout.cool/) have added locks to their dashboards.\n\nScout provides analytics for Ethereum smart contracts. It provides unique (and real time) insights into economics and governance of on chain protocols.\n\nFor example, it provides a very useful dashboard to inspect the [state of the Aragon network](https://scout.cool/aragon/mainnet), or the state of the [Set Protocol](https://scout.cool/setprotocol/mainnet).\n\nOf course, they also added a [dashboard for Unlock](https://scout.cool/unlockprotocol/mainnet), where you can view the total number of locks deployed, the balances of Ether or DAI across all locks, and even all the latest key purchases.\n\n![Scout dashboard for Unlock](/static/images/blog/unlocking-scout/unlock-scout-dashboard.png)\n\nHowever, we only wanted to grant access to members of our community, so, unless you already have a valid key to our lock, here is what you'll see:\n\n![Scout is locked](/static/images/blog/unlocking-scout/scout-locked.png)\n<small>Click that button: it's free</small>\n\nWe're very excited to see other web3 applications use Unlock to limit access to their content or features only to owners of keys for a given lock.\nOne of the really interesting features is that you do not need a user account on our blog, nor one on Scout: your Ethereum address is your identity and if you own a key, you are member of the lock!\n\nKuan, founder at Scout adds:\n\n> \"Unlock protocol is the easiest off the shelf solution that can enable our customers to control access of their dashboards. And it is blockchain native!\"\n\nIf you're considering adding a Scout dashboard to your smart contract give the scout team your lock address!\n\nOur friends at Scout use React for their front-end application (like we do!) and they used [our React tutorial](/blog/integratating-unlock-react), but we provide more details on how to integrate any front end application on [this wiki page](https://github.com/unlock-protocol/unlock/wiki/Integrating-Unlock-on-your-site): add a lock to your content today! Our team is here to help you...\n"},{"title":"Introducing Tickets","subTitle":"Now you can buy tickets to real-world events using Ethereum","authorName":"Ben Werdmuller","publishDate":"August 8, 2019","description":"Now you can buy tickets to real-world events using Ethereum and the Unlock Protocol.","image":"/static/images/blog/introducing-tickets/introducing-tickets.jpg","slug":"introducing-tickets","content":"\n![introducing tickets](/static/images/blog/introducing-tickets/introducing-tickets.jpg)\n\nThe Unlock Protocol isn't just a way to pay to access services on the internet.\n\nWe’re building a protocol that can be used to unlock access to _anything_ - and while that means [content, software \nlicenses and more](https://unlock-protocol.com/blog/ways-to-unlock-the-web/), we also want to help people sell access \nthings in the real world.\n\nIn the future, the Unlock Protocol may be used to sell tickets for transportation, as a way to seamlessly manage room \naccess in hotels and holiday rentals, and as a way to prove you've paid for a membership. Today, we're starting with\nevents.\n\nYou can buy a ticket to the [Berlin Open Source Salon](https://berlin.opensourcesalon.com/) with DAI using Unlock.\n[Visit the Unlock event page](https://tickets.unlock-protocol.com/event/0x98c0cbF0e9525f1a6975A51c9D5E8e063c034D6D),\npurchase a ticket, and then show your special QR code at the door. Your ticket will be validated on the blockchain.\n\n![Berlin Open Source Salon ticket page](/static/images/blog/introducing-tickets/boss-tickets.png)\n\n## How tickets work with Unlock\n\nEvery Unlock transaction - whether for content, an event, software licenses, or anything else - works by selling a _key_ \nto a _lock_ using Ethereum. Tickets are no different.\n\n![Unlock ticket creation screen](/static/images/blog/introducing-tickets/create-an-event.png)\n\nOnce a lock has been created, creators have access to a number of ways to use it: different applications that sit on top of\nthe Unlock Protocol. The ticketed event application allows you to save a date, title, description, and location for the\nevent. These aren't stored on the blockchain itself: instead, they create a database record that references the lock's \nEthereum address.\n\nAn attendee with an Ethereum wallet like Metamask can buy a key with one click. The event page then shows a QR code, which\ncontains the user's public key and a signed version of the lock address. This can be verified at the door with a\ncommodity QR code reader, which are now built into the camera apps in every major mobile operating system.\n\n## Multi-use locks\n\nOn the Unlock Protocol, you're not limited to using one application per lock. This means that a ticketed event and a\ncontent paywall can run on the same lock: if you purchase access to the paywall, you'll be able to get access to the\nevent, or if you purchase access to the event, you'll automatically be able to view protected content.\n\nThis means you can very easily string together a series of connected assets to sell as a bundle. Perhaps you want to\ngive premium customers for your publication access to a series of workshops. Or you want to provide access to a custom\nsocial network for attendees of your event. As we add more applications, and third parties build on top of our open\nprotocol to add even more, the possibilities will become endless.\n\n## Learn more\n\nWe're building Unlock in the open. You can always say hello in our [Telegram group](https://t.me/unlockprotocol), join \nus on our [Github project](https://github.com/unlock-protocol/unlock/) or reach out at\n[hello@unlock-protocol.com](mailto:hello@unlock-protocol.com). We would love to hear from you.\n"},{"title":"Unlock this blog","subTitle":"We've put a lock on our own blog! Members can leave comments, read exclusive content and will receive a Non Fungible Token.","authorName":"Julien Genestoux","publishDate":"July 24, 2019","description":"We've put a lock on our own blog! Members can leave comments, read exclusive content and will receive a Non Fungible Token.","image":"/static/images/blog/unlock-blog/hero.jpg","slug":"unlock-this-blog","content":"\n\nUnlock is a [protocol for memberships](/blog/protocol-for-membership). It helps creators monetize by selling access keys to their community - fans, supporters, or even simple users - by helping them deploy a lock and sell access keys to this lock (they can chose their currency, price, the duration of the keys and the number of keys they want to sell).\n\nWe decided to create a lock for members of our community. It's a good way for us to show what's possible with a lock. Since our goal was not to make money, we decided to charge _0 eth_ for the keys.\n\nWhen integrating the lock on this blog, we decided to reflect the membership status in 3 different things:\n\n1. The lower bar at the bottom of every page. ⬇️ Since I am a member, mine shows this:\n\n![member bar](/static/images/blog/unlock-blog/member-bar.png)\n\n2. On each post, __members__ can view and leave [comments](#comments).\n\n3. We've locked some exclusive content. For example, this Google Slideshow from a presentation made at Betaworks about [Non Fungible Tokens](/blog/non-fungible-tokens-betaworks).\n\n# Bundling\n\nThe lock we use on this blog is in no way limited to this site. We could (and will, stay tuned...) re-use the lock on different sites or applications. As a matter of fact, you could even add *our* lock to *your* site or application, if you wanted to only grant access to people who are part of our community. That approach is how creators can deploy \"bundles\": a single lock is used on several different websites or applications!\n\n# Several locks\n\nAnother important detail is that we could very well add multiple locks to this site. If we did so, a single key to any of the locks would unlock the whole page.\n\nMaybe we'd have a lock for our most loyal fans (with a limit on the number of keys), and maybe we'd have another one for everyone else, using another currency or one which we would \"share\" with several other applications to be part of their bundle. The possibilities are endless.\n\n# A Non Fungible Token\n\nOf course, this website implements what we call [optimistic unlocking](/blog/hello-optimistic-unlocking/). Basically, our blog will treat you as a member as soon as you've sent the transaction, without waiting for it to have completed mining. But, once the transaction actually goes through, you will receive you unique access key. It is a non fungible token and you can [view them all on this page](https://opensea.io/assets/unlock-blog-members).\n\nLike all other non fungible tokens, you can trade your keys! For example, I am auctionning my key to this very blog for 0.1Eth: get it for free here, [or buy it from me](https://opensea.io/assets/0xb0114bbdce17e0af91b2be32916a1e236cf6034f/2/sell#!)!\n\n\n\n\n"},{"title":"Creating your first lock","subTitle":"A lock is a smart contract which holds the list of members of your community.","authorName":"Julien Genestoux","publishDate":"July 15, 2019","description":"Locks are the core of the Unlock protocol. They are smart contracts deployed on the Ethereum chain which lets your community become members by purchasing keys to your lock.","image":"/static/images/blog/first-lock/new-lock.jpg","slug":"create-first-lock","content":"\n\n![new lock](/static/images/blog/first-lock/new-lock.jpg)\n\nA lock is a way to represent a *membership*. Each member has a key to the lock which they can purchase from the lock directly.\n\n## So, you want to create your first lock?\n\nFirst, you need an Ethereum wallet. On desktop, the most popular is [Metamask](https://metamask.io/), but things should work similarly with any Ethereum wallet. For now, we recommend using a desktop computer rather than mobile device because the UI is much cleaner there.\n\nGo to the _Creator Dashbboard_ on [https://unlock-protocol.com](https://unlock-protocol.com). This creator dashboard will help you manage your locks (create them, update them, or view some data about them...).\n\nFor now, it should be empty and look like this:\n\n![empty dashboard](/static/images/blog/first-lock/empty-dashboard.png)\n\nOn the top left, you can see which network you're connected to. Ethereum has a single \"Main Network\" and several test networks, such as Rinkeby or Goerli. Make sure you're on the Main Network. You can also view which address your wallet is currently using.\n\nOn the top right, a button lets you create a lock. Once you click on it, a form appears and lets you prepare your first lock.\n\n![create lock form](/static/images/blog/first-lock/create-lock-form.png)\n\nWhen creating a lock, each field can be edited.\n\n### The name\n\nFirst, the name. The lock's name is stored on-chain and is used by other applications which may want to show information about your lock and its keys, such as [Etherscan](https://etherscan.io/), [OpenSea](https://opensea.io/) and more. Use something descriptive but fairly short as every character counts toward the fees you'll pay to deploy this lock.\n\n### The Duration\n\nEach key has a duration. At the end of the duration the membership is considered \"expired\" and should not grant access to the key holder. In this case, members can renew to make their key valid again.\n\nThe duration is expressed in seconds in the smart contract, but given the inherent latency of the blockchain we believe that durations shorter than 1 day are not practical. Most creators will pick durations of months to years.\n\nPicking the right duration is useful because a key holder can \"cancel\" their key by sending it back to the lock to get a refund. The elapsed duration is used to assess the amount to be refunded.\n\n### The number of keys\n\nAs the lock owner you can choose how many people can purchase keys. This is important because many membership are \"exclusive\". For example, an artist may want to only allocate a small number of keys to their truest fans (in that case, they would have several locks, each represented a _level_ of membership).\n\nIt is possible to set an unlimited number of members.\n\nNote that expired keys still count toward the maximum number of keys, but as we've seen, keys can be extended (by sending another payment to the lock) and they can be transfered as well...\n\n### Key Price\n\nThe price of each key is made of 2 things: the currency and the amount of that currency. By default, our UI uses Ether, the native Ethereum currency, but the UI also leaves the option to use [DAI](https://makerdao.com/en/dai), a stable coin, whose value is always 1$. <small>(Our smart contract actually supports any [ERC20](https://www.investopedia.com/news/what-erc20-and-what-does-it-mean-ethereum/). Please get in touch if you need to deploy a lock which uses something else than DAI!)</small>\n\nOnce you've chosen your currency, you can set the price you want, from 0 to billions!\n\n### Submitting\n\nMake sure all values you've chosen are correct. Most of them cannot be changed once the lock has been deployed.\n\nAfter submitting, your wallet will ask for a confirmation. Deploying a lock is fairly \"expensive\" in gas (at least 4M), because it a a full contract deployed under your address. Unless deploying the lock is urgent, you should probably set a low gas price.\n\nIt is important that you wait for the lock to be deployed, because its address (starting with `0x`) will only be final then, and that address will be used by your members to send payments and you don't want them to send a payment to the wrong address!\n\n### No Ether? No problem\n\nLocks themselves can be transfered. This means that we can create the locks for you and transfer them to you. If we do this, you do not even need Ether to pay for the fees. We will create the lock based on your needs and send it to your address so you can start using it ASAP!\n\n## Next!\n\nThat's it! Your lock has now been created. The next step is to integrate it on your website to let people become members. See the wiki page on [how to integrate unlock](https://github.com/unlock-protocol/unlock/wiki/Integrating-Unlock-on-your-site), and a few posts on how to integrate this in your CMS, such as [Known](/blog/integrating-unlock-with-known/), or inside a front end web framework, such as [React](/blog/integratating-unlock-react/).\n\nIf you need help for your own stack, please, reach out, we're here to help!\n"},{"title":"Integrating Unlock with React","subTitle":"Our Javascript API is very easy to integrate with React!","authorName":"Julien Genestoux","publishDate":"July 10, 2019","description":"Integrating Unlock with React is straighforward! Here's a quick tutorial on how to get there!","image":"/static/images/blog/react-integration/react-logo.png","slug":"integratating-unlock-react","content":"\n\nReact is one of the main JavaScript front end frameworks. Unlock's JavaScript API provides an easy way for any creator to restrict access to content or features. For example, on this very blog (which [uses React](https://github.com/unlock-protocol/unlock/tree/master/unlock-protocol.com)), only the members (who own a key to the creator's lock) can leave comments.\n\nHere is a tutorial on how to integrate Unlock in your react application. We will create an React application (using [create-react-app](https://github.com/facebook/create-react-app)) which will show the user whether they own a key (unlocked!), or if they need to purchase one (locked). The [code for the application is on Github](https://github.com/unlock-protocol/react-example); you can try it yourself directly on the [corresponding github page](https://unlock-protocol.github.io/react-example/).\n\nWe will assume you have already created a react application and that application should behave differently based on whether the user is a member or not.\n\n1. Include the Unlock snippet\n\nWe do that by changing the `index.html` (main HTML template) of our application. The following snippet is added the the `<head>` section:\n\n```\n<script> (function (d, s) {\n    var js = d.createElement(s),\n      sc = d.getElementsByTagName(s)[0];\n    js.src = \"https://paywall.unlock-protocol.com/static/unlock.1.0.min.js\";\n    sc.parentNode.insertBefore(js, sc);\n  }(document, \"script\"));\n</script>\n```\n\nNote: this loading technique is non blocking, which means this does not have any performance impact on rendering.\n\n2. Add the configuration\n\nThe snippet inserted above needs to know which lock are used on this page.  For this example, we will use a single lock, the one that is already being used on that blog.\n\n```\n<script>\n  var unlockProtocolConfig = {\n    locks: {\n      '0xB0114bbDCe17e0AF91b2Be32916a1e236cf6034F': {\n        name: 'The Unlock Members lock',\n      },\n    },\n    icon: 'https://unlock-protocol.com/static/images/svg/unlock-word-mark.svg',\n    callToAction: {\n      default:\n        'Please Unlock things!',\n    },\n  }\n</script>\n```\n\n3. Writing the component which listens to Unlock\n\nReact components can have their own local state (which can be passed down to their children components). Here, our state will likely include a `locked` key. The value associated with that key can be any of the 3 following:\n* `locked`\n* `unlocked`\n* `pending`\n\nThe `pending` state allows us to not show to the use a \"flash\" when toggling between the 2 other state. When the page loads, we do not know right away whether the state should be locked or unlocked. Fortunately though, the unlock JavaScript API is very fast (we cache a lot of data) to make sure that, in the vast majority of cases, the user will actually not witness the `pending` state.\n\n```\nconstructor(props) {\n  super(props)\n  this.state = {\n    locked: \"pending\" // there are 3 state: pending, locked and unlocked\n  }\n}\n```\n\nReact's component have lifecycle methods which let developers integrate with JavaScript API calls. Unlock uses the `window.addEventListener` API to trigger an `unlockProtocol` in order to indicate the state of the lock for the current visitor, so our component needs to implement the following method when it is mounted:\n\n```\ncomponentDidMount() {\n  window.addEventListener(\"unlockProtocol\", this.unlockHandler)\n}\n```\n\nNote: `this.unlockHandler` will be implemented below.\n\nSimilarly, when the component is to be removed, we want to perform some cleanup to avoid wasting the browser's resources.\n\n```\ncomponentWillUnmount() {\n  window.removeEventListener(\"unlockProtocol\", this.unlockHandler)\n}\n```\n\nWe need to add our `unlockHandler` in the constructor:\n\n```\nconstructor(props) {\n  super(props)\n  this.unlockHandler = this.unlockHandler.bind(this)\n  this.state = {\n    locked: \"pending\" // there are 3 state: pending, locked and unlocked\n  }\n}\n```\n\nAnd we also implement it by using React's `setState` method. Unlock will emit either `locked` or `unlocked`.\n\n```\nunlockHandler(e) {\n  this.setState(state => {\n    return {\n      ...state,\n      locked: e.detail\n    }\n  })\n}\n```\n\nWhen the state is `locked`, we want to let the user purchase a key. For this, we use the modal provided by the Unlock JavaScript API, but you could very well implement that logic yourself (it would require tinkering with the web3 providers though...)\n\n```\ncheckout() {\n  window.unlockProtocol && window.unlockProtocol.loadCheckoutModal()\n}\n```\n\n\nNow that we have the state and ways to invoke a key purchase, we can easily render based on it. This is probably where your app's logic will likely diverge the most, but here is what we did for our demo application:\n* if the content is locked, we show a 🔒, anc clicking on it will open the checkout model.\n* if the content is unlocked, we show a 🗝!\n\n```\nrender() {\n  const { locked } = this.state\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {locked === \"locked\" && (\n          <div onClick={this.checkout} style={{ cursor: \"pointer\" }}>\n            Unlock me!{\" \"}\n            <span aria-label=\"locked\" role=\"img\">\n              🔒\n            </span>\n          </div>\n        )}\n        {locked === \"unlocked\" && (\n          <div>\n            Unlocked!{\" \"}\n            <span aria-label=\"unlocked\" role=\"img\">\n              🗝\n            </span>\n          </div>\n        )}\n      </header>\n    </div>\n  )\n}\n```\n\n## Conclusion\n\nUnlock's JavaScript API is very simple and will get out of the way to let you implement behaviors that your application requires. This blog only lets members comments, but also shows the status in the bottom bar...\n\nIf the status of the lock is re-used in several components, it might be a good idea to isolate that logic in a single one and pass the state as props to sub-components!\n\n"},{"title":"Integrating Unlock with Known","subTitle":"How I added the Unlock protocol to an open source publishing platform quickly and easily.","authorName":"Ben Werdmuller","publishDate":"July 2, 2019","description":"The Unlock API is flexible and easy to use. Now any Known user can use Unlock on their website with a simple plugin. Here's how we did it.","image":"/static/images/blog/known/known-unlock.png","slug":"integrating-unlock-with-known","content":"\nThousands of people participate in the [IndieWeb](https://indieweb.org): a growing movement that encourages people to publish on their own site rather than \"silo\" networks like Facebook and Twitter. [As The New Yorker put it](https://www.newyorker.com/tech/annals-of-technology/can-indie-social-media-save-us):\n\n> Proponents of the IndieWeb offer a fairly straightforward analysis of our current social-media crisis. They frame it in terms of a single question: Who owns the servers? The bulk of our online activity takes places on servers owned by a small number of massive companies. Servers cost money to run. If you’re using a company’s servers without paying for the privilege, then that company must be finding other ways to “extract value” from you—and it’s that quest for large-scale value extraction, they argue, that leads directly to the crises of compromised privacy and engineered addictiveness with which we’re currently grappling.\n\n[Known](https://withknown.com) was one of the first indieweb publishing platforms. It lets anyone host a social media profile on their own webspace. You can respond to posts on other indieweb platforms, or invite visitors to discuss directly on your posts.\n\nIntegrating Unlock with Known means allowing these indieweb users to sell memberships to aspects of their sites. Disclaimer: I'm the co-founder of Known and its first user. [I still use it on my website](https://werd.io) - and I want to use Unlock there, too. So it was in my interest to create a plugin.\n\nHere's what I wanted to achieve:\n\n* I want to restrict access to long-form content\n* I want to restrict access to commenting\n* I don't want Known users to have to write a single line of code\n\nIn other words, I want to add a paywall to my long-form posts (but just my long-form posts), and I want comments on _all_ posts to be limited to people who have bought access with Unlock.\n\nIf you don't care about how I built this, you can stop now: [the plugin is available to download on GitHub](https://github.com/benwerd/unlock), and you can install it as a plugin in the latest Known platform. Everything is powered using a simple admin panel.\n\n![The Unlock admin panel in Known.](/static/images/blog/known/unlock-admin.png)\n\nTo build the plugin, I used two aspects of Unlock in tandem: the paywall and the Unlock JavaScript API.\n\n![The Unlock paywall on Known.](/static/images/blog/known/known-unlock.png)\n\n## 1. The paywall. \n\nI added the site-wide ability to attach a lock to my Known site. When this is present, all long-form posts will be protected by that Unlock lock.\n\n![Unlock fields](/static/images/blog/known/unlock-fields.png)\n\nI also added a per-post lock field. Instead of using a site-wide lock, I could choose to add a lock address to just one or two particularly valuable posts. Then most of my site would remain free, but these posts would be restricted. I could _also_ keep the whole site protected under one lock, but then use a different lock address for a handful of posts. That would allow me to charge extra for access to those.\n\nWhen Known finds a lock on the page - either site-wide or relating to the post we're trying to view - it loads the paywall code, which looks like this:\n\n```\n<!-- Include this script in the <head> section of your page -->\n<script src=\"https://paywall.unlock-protocol.com/static/paywall.min.js\"\n        data-unlock-url=\"https://paywall.unlock-protocol.com\"></script>\n<meta name=\"lock\" content=\"<?= $lockAddress ?>\"/>\n```\n\nNote that this is identical to the paywall code that anyone can use. The only difference is that we're retrieving the lock\naddress from the site or post configuration with a short snippet of PHP.\n\n## 2. The Unlock API.\n\nOn every post, I restricted access to commenting.\n\nHere, I wanted to display my own UI, rather than using a built-in Unlock app. So I needed to use a combination of the\nUnlock JavaScript API and Known's back-end PHP library.\n\nTo begin with, I made sure both the Unlock configuration and library were loaded in the `<head />` section of each page appropriately.\n\nFirst the configuration object:\n\n```\n<script>\n    var unlockProtocolConfig = {\n    locks: {\n        '<?=$lockAddress?>': {\n            name: '<?=\\Idno\\Core\\Idno::site()->config()->getTitle()?> Members',\n        },\n    },\n    icon: 'https://unlock-protocol.com/static/images/svg/unlock-word-mark.svg',\n    callToAction: {\n        default:\n            'Members can leave comments and participate in discussion.',\n        },\n    }\n</script>\n```\n\nAnd then the library itself:\n\n```\n<script>\n    (function (d, s) {\n    var js = d.createElement(s),\n    sc = d.getElementsByTagName(s)[0];\n    js.src = \"https://paywall.unlock-protocol.com/static/unlock.1.0.min.js\";\n    sc.parentNode.insertBefore(js, sc);\n    }(document, \"script\"));\n</script>\n```\n\nI then created a replacement comment template in Known. Here, I loaded HTML for the comment form into a variable called `commentForm`; I also added HTML for a link with a call to action into a variable called `commentCta`.\n\n```\n<div id=\"comment-form\"></div>\n<script>\n    // Load JS variable values from PHP variables\n    var commentForm = <?=json_encode($commentForm)?>;\n    var commentCta = <?=json_encode($commentCta)?>;\n\n    // Listen to Unlock protocol API\n    window.addEventListener('unlockProtocol', function (e) {\n        var state = e.detail\n        if (state === 'unlocked') {\n            $('#comment-form').html(commentForm);\n        }\n        if (state === 'locked') {\n            $('#comment-form').html(commentCta)\n        }\n    })\n</script>\n```\n\nWhat's happening here? Once the Unlock protocol handler is loaded (which we did by adding the library and configuration above), all we need to do is listen for events generated by `unlockProtocol`. If `event.detail` is equal to `unlocked`, we know the current user has access to the lock. Conversely, if `event.detail` is equal to `locked`, we know the current user _doesn't_ have access.\n\nThe form HTML is purely for Known, so I won't go into it here, but it's worth looking more closely at the CTA:\n\n```\n<div class=\"unlock-cta\">\n    <a href=\"#\" onclick=\"window.unlockProtocol && unlockProtocol.loadCheckoutModal()\">\n        Purchase access to leave comments.</a>\n</div>\n```\n\nOn click, I check that `window.unlockProtocol` exists (i.e., the library has been loaded), and then load a provided method called `unlockProtocol.loadCheckoutModal()` that loads a modal containing the Unlock lock. The text shouldn't be a surprise: I set it in the `callToAction` of my configuration section.\n\n![Unlock modal](/static/images/blog/known/unlock-modal.png)\n\nAnd that's all I need to do. The Unlock API manages the purchase process and all of the access control. It's as lightweight as it can be.\n\nHave you integrated Unlock into your application? We'd love to hear from you. You can email us at [hello@unlock-protocol.com](mailto:hello@unlock-protocol.com) or come say hi on [our Telegram group](https://t.me/unlockprotocol).\n"},{"title":"Digital Cash. Big Deal.","subTitle":"Wallets and their superpowers for users.","authorName":"Sascha Mombartz","publishDate":"July 2, 2019","description":"A quick exploration into blockchain wallets, their applications and why they're so powerful.","image":"/static/images/blog/digital-cash/digitalcash.jpg","slug":"digital-cash","content":"\n\nThe wallet. It’s your interface into the blockchain. It lets you transact with the blockchain and in Ethereum’s case also with its smart contracts. You could think of it as an account but its more of an identifier with the crucial difference that you are in possession of it. It’s not stored on a server but lives with you, on your computer, your phone or hardware wallet.\n\n# Control & Transparency\n\nThe fact that you’re in full control and the sole owner of your wallet and therefore the means with which you transact with the blockchain are a powerful aspect. \n\nThink about it: your bank  account is managed by your bank, the data associated with it (your personal data, but also the data that represents your money) lives on servers that the bank controls, even your credit card is owned by the bank and governed by a cardholder agreement. It’s your money though! And it doesn’t end there. When you’re sending money your transaction is facilitated by the sending and receiving bank, plus the processor (Visa, Mastercard, etc.) and whoever else is in  the middle of that transaction (Western Union, Transferwise, Square, Stripe). And then you wonder, where is my money that’s mentioned in my bank account actually physically? The reason this matters is that you are dependent on the bank, their rules, fees and whims. If you take this to an extreme and imagine the bank going bankrupt, because they took on too much risk, you have no control and your money might be gone. On a less extreme level they might not let you do business with them because you fall into a legal gray zone – think Wikileaks or many blockchain projects.\n\n<p style=\"text-align:center\">\n\t<img src=\"/static/images/blog/digital-cash/digitalcash.jpg\" width=\"400px\" alt=\"BLockchain has many features that make it digital cash.\">\n</p>\n\n# Digital Cash\n\nBlockchain transactions behave more like cash. We have a mutual understanding of the value of our physical money and you own and control the cash that’s in your real world wallet. You hand over the cash without anyone in middle and the transaction is done. This is very similar to the blockchain with a few additional advantages: your blockchain wallet can live in several places and you can transact without having to be in the same physical space. On  top of that the Ethereum blockchain (and other blockchain projects) let you create smart contracts that allow you to codify and automate parts of the transaction.\n\nI liked this analogie by [Steven Chien](https://twitter.com/stevenmeets): he calls the internet the “Information Superhighway” – which allowed for the large scale (and cost efficient) distribution of information and the blockchain the “Value Superhighway” – that allow for a large scale and cost efficient but also more equitable distribution of value. It’s a good read, check it out on [Hackernoon](https://hackernoon.com/blockchain-the-value-superhighway-into-your-wallet-9330cec5bf8f).\n\n<p style=\"text-align:center\">\n\t<img src=\"/static/images/blog/digital-cash/keychain.jpg\" width=\"400px\" alt=\"Towards an access ecosystem.\">\n</p>\n\n# Access\n\nSo that’s cool, we have a wallet, we control what’s in it, how we transact and there are no intermediaries. Its also relatively fast all things considered: blockchain transactions sometimes take a while to confirm but in terms of overall settlement its faster than a bank transfer or a credit card transaction (they can take anywhere from 3 to 30 days to complete).\n\nBecause there's a ledger of every transaction, apps can easily determine who’s paid for access and unlock it for you. In that sense your wallet is also a keychain.\n\n<p style=\"text-align:center\">\n\t<img src=\"/static/images/blog/digital-cash/creditcard.jpg\" width=\"400px\" alt=\"One wallet, access to many different things.\">\n</p>\n\n# Beyond Cash\n\nTaking that idea a step further you could start swapping, trading or even bundling keys where one key gives you access to multiple sites or pieces of content that all share the same lock (I wrote about this in our [Multi Use Locks](https://unlock-protocol.com/blog/multi-use-locks/) post if you’re curious about that). The most interesting part is yet to come: ledger plus smart contracts allows users to receive tokens for specific actions – so if you refer a creators content or you’ve paid for access 10 times you could get a kickback.\n\nThis feature set is really powerful: imagine if you could get into your WeWork office with your credit card (because you’ve paid for your desk with it) but it also gives you access to the new york times online, gets you bonus points at your local coffee shop and at the end of the day opens up and pays for your car2go or zipcar.\n\n\nYou have thoughts or comments? Reach out I’d love to chat. [@UnlockProtocol](https://twitter.com/UnlockProtocol) or [hello@unlock-protocol.com](mailto:hello@unlock-protocol.com) or become a member of the blog and add a comment."},{"title":"Mission, Vision and Values","subTitle":"We empower creators to capture the value they create for their community, on their own terms","authorName":"Julien Genestoux","publishDate":"June 27, 2019","description":"Identifying Mission, Vision and Values informs business strategy and paints a holistic and accurate picture of a business.","image":"/static/images/blog/whatisunlock.jpg","slug":"mission-vision","content":"\n\nA recipe to go from zero to one cannot exist. Creating a company, a team, a product or a protocol require a lot of work and faith. Our goal is ambitious, but it can only be achieved an incredible amount of small steps (4000 [Pull Requests](https://github.com/unlock-protocol/unlock/pulls) as of Tuesday!).\n\nThis week, we took some time to think about our **mission**, which is what we do, our **vision**, which is why we do it, and our **values**, which describe how we do it. We got some help and it took us a full day, but this work will help us in each decision and will act as a \"scaffold\" for the whole team.\n\n## Our Vision\n\nWe believe that, now, most creators are not able to capture enough of the value that they create. Open source developers, musicians, writers, or even curators provide incredible value for all users of the internet and beyond. But we also have to acknowledge that most of them are not being rewarded for that work, and when they are, it is often through gatekeepers: middlemen who set the terms and too often end up competing with them.\n\nWe know there is a better way. This is our vision:\n\n> “Every creator can make a sustainable living from their work, while respecting the time, privacy and health of their community.”\n\n## Our Mission\n\nIn order to make that vision a reality, we believe it starts with creators and this is why our mission is the following:\n\n> \"We empower creators to capture the value they create for their community, on their own terms.\"\n\n## Our Values\n\nValues define \"how\" we want to achieve our mission and realize the vision. They provide principles that we want to live by, both internally, but also externally, with users of the protocol and members of our own community. Here are the ones we chose:\n\n- Collaborative\n- Human Centered\n- Mission Driven\n- Simple\n- Transparent\n\nOf course, in that list there are things that we already apply, and others which are, at least for now, more aspirational.\n\nBased on that list, it should be pretty clear that your input matters to us. We hope that you'll provide us guidance on how to adopt these principles during our journey! Please, reach out to us, in comments below, on [Telegram](https://t.me/unlockprotocol), or even privately using the Intercom widget in the lower right corner of this page.\n"},{"title":"Non Fungible Tokens at Betaworks Studios","subTitle":"Non Fungible are one of the largest emerging token categories in the crypto asset world.","authorName":"Julien Genestoux","publishDate":"June 23, 2019","description":"Non Fungible are one of the largest emerging token categories in the crypto asset world. We presented an intro to them at Betaworks Studios!","image":"/static/images/blog/non-fungible-tokens-betaworks/non-fongible-tokens-betaworks.png","membersOnly":"<div class=\"responsiveWrapper\">\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vSFvpySR7seFBpTHXp-Kj6Zh4lImruyZ38iUI2grCTeUh2ErngKCTpXRDMSrwxh4VqbVy6JaY2X8H7P/embed?start=false&loop=false&delayms=3000\" frameBorder=\"0\" width=\"960\" height=\"569\" allowFullScreen=\"true\" mozallowFullScreen=\"true\" webkitallowFullScreen=\"true\"></iframe>\n</div>\n","nonMembersOnly":"<img src=\"/static/images/blog/non-fungible-tokens-betaworks/non-fongible-tokens-betaworks-locked.png\" />\n","slug":"non-fungible-tokens-betaworks","content":"\n\nOn June 21st, 2019, the team at [Betaworks Studios](https://betaworks-studios.com/) invited us to talk about Non Fungible Tokens.\n\nThey are a type of crypto token which aims at represented unique (or rare) \"things\". This is intentionnaly vague because they can be used to represent many many things, both virtual and physical.\n\nFor example, Non Fungible Tokens can be used to represent membership. If you are a member to Unlock's blog, then you own a Non Fungible Token called a \"key\".\n\nAmong other things, this key will let you access access the slides of the presentation below!\n"},{"title":"A Protocol for Membership","subTitle":"Monetizing creation by leveraging membership to communities","authorName":"Julien Genestoux","publishDate":"June 19, 2019","description":"The Unlock protocol provides a way for people to show their support and access exclusive content, features, or even status. It is a web-native way for creators to monetize their work.","image":"/static/images/blog/protocol-for-memberships.png","slug":"protocol-for-membership","content":"\n\nThe difference between the web and native applications is the presence of **links**. These links are the reason why the web is a \"network\", as they connect pages together, making a graph. Google and its PageRank algorithm have leveraged that graph to rank websites, by assuming that the sites which have the most links are the most relevant.\n\n![Use one Unlock lock for a variety of services and products.](/static/images/blog/protocol-for-memberships.png)\n\n## Memberships > Attention\n\nHowever, since the beginning, these links have also formed **communities**. Websites which discuss the same topics tend to link to each other, creating de-facto communities of interest. The social web reinforced that trend: people following each other formed more communities. Creators gathered groups of users around their work. Whether they are blogger or journalists, musician or even developers, they formed groups which attracted users because of their values, the content they produce, or even the tools that were offered to the members of the community.\n\nUp until now, _we monetized the web through attention_. The creators who were able to \"steal\" the most would be paid the most. We're obviously reaching the limits of that model. It is time to start considering that these communities have value for their members... and that these members actually want to contribute to their communities as well.\n\n## A protocol for memberships\n\nUnlock is a protocol for memberships. Creators have locks which define the terms of the membership (price, duration, quantity, or even currency!) and consumers can purchase keys to these locks.\n\nIn practice, that means that the protocol empowers creators (or anyone, really!) to create locks for their communities. It's an open protocol, so anyone can participate: there is no gatekeeper or middleman.\n\nLocks themselves can be used for many different things, limiting access to content (paywall...), to features (software licenses...), or even status (patronage...).\n\n## Leading by example!\n\nWe're putting [our money where our mouth is](/blog/crypto-first/). Starting today, we've added a lock to this website. We decided to **limit access to the comments** to the members of the community.\n\nYou can unlock your membership by clicking on the bar at the bottom below (we actually set a price of 0 Ether, so you only pay for gas fees). Once you have a key, you will be able to read and write comments.\n\nAn important thing to note is that once the transaction has been confirmed, you will receive a Non Fungible Token on your crypto wallet. Like any other token, it is yours, and you can sell it, using [OpenSea](https://opensea.io/), for example.\n"},{"title":"Introducing ERC20 Locks","subTitle":"Creators can chose any Ethereum based token when they sell keys to their locks.","authorName":"Julien Genestoux","publishDate":"June 13, 2019","description":"A lot of the creators that we spoke with were concerned by the volatile nature of Ether when using it to price their keys: we needed to support stable coins. The ERC20 standard is a way to create tokens which are all compatible, even though they may have different implementations.","image":"/static/images/blog/erc20-locks/hero.jpg","slug":"erc20-locks","content":"\n\n![Dashboard Lock](/static/images/blog/erc20-locks/use-dai.jpg)\n\nWhen creators deploy their locks using our dashboard, they can chose the following:\n\n- the name of their locks\n- how long each key is valid (from seconds to centuries!)\n- how many keys they are selling (with the ability to sell an unlimited amount)\n- and more importantly, the price of keys\n\nUp until today, the price of the keys had to be in Ether. Today, we're happy to announce that we now support any ERC20 token as the currency for the price. As a creator you can now sell access to your content or features inside of your (d)applications using BNB, MKR or even BAT...\n\n## Using stable coins\n\nOut of ERC20 tokens, there is a category of tokens which is special: stable coins. These tokens have a value that is designed to be stable, most often against US dollars. Some of them are actually backed by financial organizations who guarantee a 1 to 1 exchange (such as USDC for example), while others are based on onchain collaterals (DAI is a good example of that!), while finally, a 3rd category is based on seigniorage: the supply expands and retracts based on price fluctuations. Learn more about stable coins with [this overview](https://multicoin.capital/2018/01/17/an-overview-of-stablecoins/) from Multicoin.\n\nA lot of the creators that we spoke to were worried about the use of fluctuating currencies. If the price went down, they would lose some of their revenues, and if it went up, they were rightfully worried that their customers may not end up buying keys from them... as they could be waiting for appreciation of their tokens.\n\nWe believe that many locks will end up being priced using stable coins, which is why our dashboard UI will let creators pick DAI as the currency<sup>1</sup>.\n\n## Bringing utility to utility coins!\n\nWe also strongly believe that many ERC20 currencies are \"community\" currencies. Their value is rooted in the fact that it is a very specific use. For example, MKR is a governance token which lets owners of it vote on changes in the Maker systems.\n\nNow, nothing says that the MKR tokens, which are actively traded on several exchanges could not be used for other purposes, such as purchasing access keys. For example, Maker could organize a launch party for their upcoming multi-collateral currency where tickets are sold using MKR. For this, they could use Unlock's [ticket application](https://tickets.unlock-protocol.com/)...\n\n## Get started today\n\nHead out to the [creator dashboard](https://unlock-protocol.com/) now and click on the _Create Lock_ Button:\n\n![Create a Lock](/static/images/blog/erc20-locks/create-lock.png)\n\nThen, select DAI as the currency when picking up a price:\n\n![Create a Lock](/static/images/blog/erc20-locks/select-dai.png)\n\nChoose how much you want to charge (you can still change that later, but not the currency...). And hit submit. Once that transaction has been mined, your lock has been deployed!\n\nOnce you have embedded the lock on your page, your readers are offered the ability to Unlock it:\n\n![A DAI lock](/static/images/blog/erc20-locks/dai-lock.png)\n\nWhen clicking on it, they are required to approve 2 transactions (the ERC20 could be a bit simpler... but we have ideas on how to solve that!):\n\n1. They need to approve the lock to withdraw some of their DAI (just the amount for the key purchase!):\n\n![Approve the ERC20 transfer](/static/images/blog/erc20-locks/approve-withdraw-erc20.png)\n\n2. Actually purchase the key (the lock contract will withdraw the right ERC20 balance):\n\n![Purchasing the key](/static/images/blog/erc20-locks/purchase-key.png)\n\nOnce the transaction as been confirmed, the customer will receive their non fungible token!\n\nWe're very excited about this release, because it opens the door to several other releases in the next coming weeks! Stay tuned ;)\n\n<sup>1</sup> Reach out if you need to deploy a lock using another ERC20 of your choice: we can help, even if we wanted to keep our UI minimalistic.\n"},{"title":"Multi Use Locks","subTitle":"One key can serve many purposes","authorName":"Sascha Mombartz","publishDate":"May 24, 2019","description":"Find out how a single key together with your wallet can unlock anything from tickets to content.","image":"/static/images/blog/multiuselocks/hero.jpg","slug":"multi-use-locks","content":"\n\n![Use one Unlock lock for a variety of services and products.](/static/images/blog/multiuselocks/hero.jpg)\n\nOne incredibly powerful thing about using Unlock is that one key can access anything that's behind a lock it has access to. That means you can place the same lock in multiple places or even use it for different purposes (as we did) and let a user who as that one key access everything. So what did we do?\n\n![The NFT Dev Meetup ticket page.](/static/images/blog/multiuselocks/nft-ticket-page.jpg)\n\nWe sold tickets to the NFT Dev Meetup during NYC Blockchain Week through [our ticket app](https://tickets.unlock-protocol.com/event/0x5865Ff2CBd045Ef1cfE19739df19E83B32b783b4) (still in beta) and then allowed ticket holders to also access [the livestream of the event](https://unlock-protocol.com/blog/nft-dev-meetup/). \n\nWithout Unlock, complicated. With Unlock piece of cake.\n\nWe created a lock on the Unlock dashboard …\n\n![The NFT events lock on the dashboard.](/static/images/blog/multiuselocks/nft-lock-dashboard.jpg)\n\n We used that lock to create a ticket page …\n\n![Creating an event page with the lock.](/static/images/blog/multiuselocks/nft-event-creation.jpg)\n\n… and then used the embed code from that same lock on [the event blog post](https://unlock-protocol.com/blog/nft-dev-meetup/).\n\n![The lock's embed code.](/static/images/blog/multiuselocks/nft-lock-embed.jpg)\n\nCheckout the [tickets page](https://tickets.unlock-protocol.com/event/0x5865Ff2CBd045Ef1cfE19739df19E83B32b783b4) and [the locked blog post](https://unlock-protocol.com/blog/nft-dev-meetup/) with the event video. Want to really try it out? You can still buy a ticket to unlock the video (disclaimer: the sound isn’t great  – and it mostly serves as proof of concept for locking the page).\n\nWant to do this for your event or content? [We’re all ears!](mailto:hello@unlock-protocol.com)\n"},{"title":"NFT Dev Meetup","subTitle":"Livestream of the NFT Dev Meetup","authorName":"Sascha Mombartz","publishDate":"May 16, 2019","description":"More info and a livestream for registred participants.","image":"/static/images/blog/nftdevmeetup/hero.jpg","paywallLock":"0x5865Ff2CBd045Ef1cfE19739df19E83B32b783b4","slug":"nft-dev-meetup","content":"\n![Optimistic Unlocking in action.](/static/images/blog/nftdevmeetup/hero.jpg)\n\nWe’re doing something different! By now you’ve probably been to a few too many after-parties. Let's not even talk about Consensus - did you see how packed the hallways were?\n\nInstead, we’re going to have an informal gameshow party where we pit eight blockchain fanatics against each other to debate fiery topics from within the industry. All in good fun and all for laughs!\n\nMeet us at 6:30PM on May 16th, at the Bushwick Generator.\n\nIf you need any help (or Eth) to purchase your ticket, please get in touch with us via the Telegram group below.\n\nBushwick Generator, 215 Moore St, Brooklyn\n\n<figure class=\"video_container\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Qq4bBs-zPZw\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n</figure>\n"},{"title":"Crypto First","subTitle":"Be the change you want to see in the world","authorName":"Julien Genestoux","publishDate":"May 6, 2019","description":"At Unlock, like many in the crypto and blockchain world, we believe that a better web is possible... and we're building it. But we also understand that dreaming and building is not enough.","image":"https://s3.amazonaws.com/assets.unlock-protocol.com/NFTEventLogos.png","slug":"crypto-first","content":"\n\n![NFT meetup during crypto week 2019](https://s3.amazonaws.com/assets.unlock-protocol.com/NFTEventLogos.png)\n\nWe are mission driven: we strongly believe that the [web's business model is broken](https://unlock-protocol.com/blog/ad-supported-web/), but more importantly, that it can be replaced with a [much healthier one](https://unlock-protocol.com/blog/its-time-to-unlock-the-web/), and we're building it, key after key, lock after lock.\n\nAs technologists, we also know that _dogfooding_ is important: it's by using the technology we build that we can understand it better. We are building new mental models as we actually experience these new products and protocols.\n\nFor example, we strongly believe that the Unlock Protocol can be used to **sell tickets** to concerts, conferences, or parties. To test that hypothesis, we are co-organizing an event here, in NYC during blockchain week, with our friends at [Dapper Labs](https://www.dapperlabs.com/), [OpenSea](https://opensea.io/), [SuperRare](https://superrare.co/) or [Quantstamp](https://quantstamp.com/).\n\nWe’re going to have an informal gameshow party where we pit eight blockchain fanatics (us!) against each other to debate fiery topics from within the industry. All in good fun and all for laughs: you [should get a ticket](https://tickets.unlock-protocol.com/event/0x5865Ff2CBd045Ef1cfE19739df19E83B32b783b4)!\n\nAs you've understood by now, this event is locked by a lock, at [0x5865ff2cbd045ef1cfe19739df19e83b32b783b4](https://etherscan.io/address/0x5865ff2cbd045ef1cfe19739df19e83b32b783b4). When you purchase a ticket, you actually acquire a Non Fungible Token, which you could trade on OpenSea, for example...\n\nOf course, this is a fairly new experience, but if you already have your crypto wallet (hint: you should!), then, it is actually a lot more straightforward than getting using one of the \"legacy\" ticket companies: we do not ask for anything and no need to type these 16 credit card digits.\nNow that you own a NFT, your ticket (or your key as we call it), on top of being tradable, can also be used to unlock more things with the same lock!\n\nWe'd love to see you there, and, maybe even more importantly to hear your feedback. What are things we should make better?\n"},{"title":"Hello Optimistic Unlocking","subTitle":"Creating a smoother, faster and a more secure online purchase experience","authorName":"Sascha Mombartz","publishDate":"April 12, 2019","description":"Introducing Optimistic Unlocking, which overcomes the slow confirmation times and provides a better user experience for blockchain transactions.","image":"/static/images/blog/hellooptimisticunlocking/hero.jpg","slug":"hello-optimistic-unlocking","content":"\n![Optimistic Unlocking in action.](/static/images/blog/hellooptimisticunlocking/hero.jpg)\n\nAt Unlock we’re all about making transactions on the web seamless and effortless. Blockchain transactions have lots of incredible features, from low cost to permissionless, but the strong suit of blockchain technology – its safety features around immutable data also means every transaction needs to be confirmed by miners. This can take time. Generally Ethereum transactions are considered final after they’ve been confirmed by 12 miners, which can take a few minutes and longer depending on how busy the network is. This presents 2 challenges: not only is this slow, but it is very hard to predict accurately.\n\nThe reason we do this is to ensure that funds aren’t double spent (accidentally or purposefully). Theoretically users could spend their Ether in one place and while that transaction is still being confirmed spend it in another place. In this instance the transaction that’s confirmed first would go through and the other would fail.\n\n![Optimistic Unlocking in action.](/static/images/blog/hellooptimisticunlocking/locked.jpg)\n\nOne of our core beliefs is that the challenge most creators are facing is not so much fraud than it is friction. Increasing conversion rates will have a much larger impact on their revenue than fighting the rare cases of fraud. So instead of adding friction or delays to all of the benevolent users in order to stop a few fraudsters, we believe it’s much more beneficial to make it easier to unlock content, even if that means that a small number of people will find ways to “cheat” creators by a few dollars.\n\nWe want to trust people! And we’re optimistic that they actually want the content and are willing to pay for it fair and square. Meet Optimistic Unlocking!\n\nWe’re working on an algorithm that will determine if a transaction is likely to go through or not, based on the user's balance, their previous transactions, and a few other factors. If it’s likely to go through, the content immediately unlocks while it’s still being mined and confirmed  in the background. We display a status bar and notifications, and a confirmation once the transaction went through.\n\n![Optimistic Unlocking in action.](/static/images/blog/hellooptimisticunlocking/confirming.jpg)\n\nA confirmed purchase will soon show a new flag with the duration of your subscription and let you click through to your keychain where you can review your purchases.\n\n![Optimistic Unlocking in action.](/static/images/blog/hellooptimisticunlocking/subscribed.jpg)\n\nShould something unexpected happen – like the transaction is taking longer than usual to be confirmed, as would happen if funds were accidentally double spent, the content gets automatically locked again. The user is informed that there was an issue with the transaction and is led through the default purchase flow.\n\nWe could also detect new transactions sent by users with a pending transaction, and immediately re-lock the content because we then know that their key purchase is likely to not go through!\n\nIf the algorithm determined this is a transaction that is unlikely to be confirmed (hopefully a rare case), the user is presented with the default purchase flow where they have to wait for the transaction to be confirmed by 12 miners. Not the worst of scenarios - it just requires a bit of patience.\n\n![Optimistic Unlocking in action.](/static/images/blog/hellooptimisticunlocking/stages.jpg)\n\nIn a nutshell, Optimistic Unlocking makes the entire purchasing experience better by allowing instant unlocking while still maintaining a high degree of security. A much nicer user experience gives users more freedom and creators more conversion, all with minimal risk.\n\nThat’s Optimistic Unlocking – and one step towards our bigger goal of removing barriers in the purchasing flow. We hope you find this mechanism just as exciting and useful as we do and we’d love to hear from you – email us, or join the conversation on telegram.\n"},{"title":"Ways to Unlock the Web","subTitle":"We’re building an open protocol to allow anyone on the web to earn money from their work. The possibilities are endless. Here are some of them.","authorName":"Ben Werdmuller","publishDate":"March 20, 2019","description":"We’re building an open protocol to allow anyone on the web to earn money from their work. The possibilities are endless. Here are some of them.","image":"/static/images/blog/waystounlocktheweb/hero.jpg","slug":"ways-to-unlock-the-web","content":"\n![ocean scene](/static/images/blog/waystounlocktheweb/hero.jpg)\n\nImagine if paying for content had been built into the web from day one.\n\nA few days ago, Julien Genestoux wrote [an introduction to Unlock](/blog/what-is-unlock): a decentralized, permission-less protocol that allows anyone to sell access to their work. It’s a great high-level introduction to our philosophy and approach. Hopefully, it also explains why Unlock is such a radical idea; something that has never been built on the web before. If you haven’t read it, [it’s a great place to start](/blog/what-is-unlock).\n\nIn this post, we’ll bring it down to earth. Now that we’ve explored the implications of an open protocol for payments — what can you do with Unlock?\n\nHere are just a few examples.\n\n## An open paywall\n\nAs publishers move away from advertising-based business models, they’re increasingly looking to replace ads with direct revenue. Paywalls are the most common way to do this.\n\n![paywall screenshot](/static/images/blog/waystounlocktheweb/paywalldesktop.png)\n\nLet’s say you’re a writer who publishes on your own site, independently. Most of your content is free, but some of your content is so valuable to a particular group of people — maybe you analyze the tech industry, or you’ve got a unique insight into the future of journalism — that you know some people will pay for it. By adding a hard paywall, you give your readers a small preview of that content, but require them to pay to access the whole thing.\n\nOr, you’re the largest newspapers in the world. Newsrooms across the world, from the [New York Times](https://www.nytimes.com/) to [Die Zeit](https://www.zeit.de/index), use paywalls to meter access to their content and drive membership revenue. You could set up a hard paywall and require payment for all content — or you could require payment after a user has read four or five articles.\n\nAs a publisher, you could negotiate with a paywall solutions provider, or work with a payments processor. The process could take months and cost you tens of thousands of dollars. In contrast, Unlock doesn’t require you to ask anyone for permission, and you can start taking payments on your content in just a handful of minutes.\n\nThis is the first application we’ve built using Unlock. It’s live right now. In fact, if you have [Metamask](https://metamask.io/) installed, you can try it yourself on [Julien’s site](https://www.ouvre-boite.com/members/), and [on my own](https://werd.io/2019/testing-the-unlock-paywall--protocolcom). In both cases, we’ll double any money spent and donate it to [she256](https://www.she256.io/).\n\n## Recognizing your community\n\nLet’s say you’re running a local newsroom. You produce journalism in the public interest, so you don’t want to lock your content away with a paywall — but you want to give your readers who can afford it the opportunity to support you. To be clear, you _need_ that support.\n\nInstead of a paywall, you place a patronage ribbon on your site. Visitors with the means can support you — and you can display their names (if they want). With this kind of patronage, you get revenue, and your supporters are publicly recognized in their community for having supported an important resource. It’s win-win.\n\nJust as with the paywall, there’s no need to sign up for an account somewhere, or wait to be approved for a patronage service that will take a hefty cut. You can build this level of community reward right into your website, either by embedding a patronage widget from us or another host, or by integrating directly with the protocol using your own code.\n\nThis model [has worked well for the Guardian](https://www.theguardian.com/membership/2018/nov/12/katharine-viner-guardian-million-reader-funding) and Wikipedia, among others, and Unlock makes it available to everyone. We’ll be releasing our patronage widget soon, but anyone can build one on top of the Unlock protocol today.\n\n## Licensing software\n\nUnlock isn’t just for content. The same principle that makes a paywall work can be used for software licensing. As an independent developer, I can allow you to unlock a license for my application in just one click, without having to depend on a centralized provider — or giving them a giant 30% cut. Because Unlock is a permission-less, decentralized protocol, developers get to keep 100% of the price of a license, and there’s no approval or banning process.\n\nUnlock allows you to experiment with revenue models. Maybe licenses or subscriptions aren’t right for you —every business is different. You could use patronage to allow your community to support development. Developers could choose to automatically embed the names of supporters on their websites or GitHub pages.\n\nMost importantly, you don’t need to fit someone else’s service into your software user experience. You can use the Unlock protocol to built a licensing or support system that fits right into what you’ve already built.\n\n## Selling tickets to your hot event\n\nImagine you’re running an arts event in your town. You want to take home 100% of the ticket price, but you also want to customize the ticket buying process: the standard form just isn’t going to cut it. It’s got to be unique to you — and it’s got to capture exactly the information you need to give the attendee a personalized experience.\n\nYou’re in luck. Just as Unlock isn’t just for content, it’s not just for access to the digital world, either.\n\nUnlock can be used to sell tickets to real-world events. Attendees purchase “keys” to attend, from the event’s own website — and then show up with a QR code representing the key at the event itself. (Who knew QR codes would come in handy after all?) Event hosts can check people in using a very similar mechanism to other event services.\n\nMost importantly, because Unlock is an open protocol, you don’t need to use our event app. Anyone can write an event service or app on top of the protocol. That means each kind of event, or each event owner, can run their own code (and capture attendee data) that best suits their context.\n\n## Reaching a premium newsletter audience\n\nFinally, Unlock can be used to create premium newsletters. Email is a decentralized open standard, so paid newsletters should be too. Best of all, mailing list owners can continue to use the email service of their choice.\n\nHere, readers buy a “key” to the mailing list, leaving their email address as part of the process. All it takes is one click. At any time, the mailing list owner can export the complete list of email addresses, and import it into Mailchimp, HubSpot, or whatever they use for mailing lists (including their own software).\n\nThe result is that paid newsletters can use an ecosystem of different apps and services, rather than squeeze themselves into a one-size-fits-all model.\n\n## And more\n\nThe beauty of Unlock is that you can think of our initial apps as proofs of concept. The only limit is what you can build: the open protocol will be there for you. And if you just want a friction-less service that works really well, with the bare minimum of setup and technical integration, we’ll provide a great suite of apps which meets that need.\n\nWe’re always interested in hearing from you. If you have questions or comments, reach out to us at [hello@unlock-protocol.com](mailto:hello@unlock-protocol.com).\n"},{"title":"What is Unlock?","subTitle":"Or, why we’re building a business model as an open protocol.","authorName":"Julien Genestoux","publishDate":"February 26, 2019","description":"Why we’re building a business model as an open protocol.","image":"/static/images/blog/whatisunlock.jpg","slug":"what-is-unlock","content":"\nIf you’ve read our words, you probably rightfully think that the thing we’re building at Unlock is some kind of new \npaywall system. This is true, but it is also only the tip of the iceberg: we’re building a protocol to lock and unlock \n“things”.\n\n![locks](/static/images/blog/whatisunlock.jpg)\n\nThe [web needs a new business model](https://medium.com/unlock-protocol/its-time-to-unlock-the-web-b98e9b94add1). A \nbusiness model is generally how an organization generates revenues AND makes a  profit. So far, the business model of \nthe web has generally been to show ads to users in order to influence their choices. This is \n[not working anymore](https://medium.com/unlock-protocol/the-end-of-the-ad-supported-web-d4d093fb462f) because this \nmodel does not sustain creation, creates massive privacy concerns, incentivizes division and hate, or centralizes power \nin the hands of a few.\n\nThis lead us to believe that since “asking for someone else to pay” was a dangerous path, we could take look at a \nsimpler approach: “asking the consumer to pay”. The next question becomes “how?”. On the web, most things that people \nconsume have a marginal cost that tends toward 0. For example, I’ll spent the time writing this post, whether 10,000 or \n10,001 people read it. Similarly, whether you listen to 1,000 or 1,001 songs on a music streaming service does not make \na difference, or whether you read 10 more messages a day on chat service has the same cost. The consequence of this is \nthat, contrary to many things in the physical world, the web native way of paying is to gain access, or to unlock. You \npay for the right to listen to music (1 or 10,000 songs), you pay to access all the stories behind a paywall, or to use \nfeatures in a given application.\n\nAt its core, our team is building a way for creators to provide access to their premium creations for paying consumers.\n\nOne of the key characteristics of the web is that it is, mostly, an open platform. There are no gatekeepers, middlemen \nor contract to agree to when building a website or web application. If we are to build an “access control” layer for \nthe web, we need to do that in a decentralized way, as a “shared protocol”. A protocol is a set of rules that define \nhow different software platforms and applications can communicate with each other to achieve a specific goal. For \nexample, HTTP is a protocol which lets anyone create a website without asking someone else’s permission, but while \nstill making sure that this website can be accessed through any web browser, crawled by search engines… etc.\n\nWhy a protocol? Because _nobody owns a protocol and yet, everyone benefits from it_. This is the “permission-less” \naspect of innovation which we think has been so tremendously impactful for the web. Nobody owns HTTP, but it is \navailable for everyone to use.\n\nBuilding a protocol is a guarantee that we, ourselves, do not become gatekeepers or control the fate of millions of \nwebsites, web applications and businesses.\n\nBy building a protocol, we also make it possible for other individuals, teams and businesses to “adopt” our vision and \nmake it theirs, without requiring us to approve or even be able to impact their roadmaps. This is important, because \nit allows us to reconcile the fact that we’re building something universal, even if we, despite our best efforts, have \nour own biases and blind spots. Other people will build different products and businesses for different users, using \ndifferent strategies, on top of the same shared infrastructure: the protocol.\n\nWe hope this answers some questions… and that it raises even more! In a future post, we’ll give a few examples of \napplications which we are building to showcase the protocol, or applications that we think other folks should build.\n"},{"title":"Announcing Unlock Version Zero","subTitle":"We’re changing the business model for the web. It starts here, today.","authorName":"Ben Werdmuller","publishDate":"January 25, 2019","description":"We’re changing the business model for the web. It starts here, today.","image":"/static/images/blog/announcingv0/paywalldemo.png","slug":"announcing-v0","content":"\n[Targeted advertising was the original sin of the web](https://www.theatlantic.com/technology/archive/2014/08/advertising-is-the-internets-original-sin/376041/). For years, the accepted business model for consumer startups was to grow exponentially at breakneck speed. Their services were optimized to lure users into spending as much time on them as possible, as regularly as possible: an addictive behavior euphemistically referred to as “engagement”. And because highly targeted advertisements were worth more, those same services were incentivized to collect as much intimate information about their users as possible.\n\nIt’s called surveillance capitalism. The bad news is that most modern internet services have been built this way. But the good news is that [the pendulum is swinging](https://medium.com/unlock-protocol/the-end-of-the-ad-supported-web-d4d093fb462f).\n\nAcross the world, people — and their governments, through legislation like GDPR — are demanding more respectful services, with hard limits on user surveillance and targeted advertising. It’s become common knowledge that if you’re not the customer, you’re the product being sold. And in a world where targeted advertising has helped swing elections and destabilize societies, the tide is continuing to turn.\n\nStartups, publishers, and creators need a strong alternative that meets these new user demands. At Unlock, we’re building a new way for them to make money on this new, more respectful web.\n\n## The Unlock Protocol\n\n[Unlock is a decentralized protocol](https://unlock-protocol.com/), built on the Ethereum blockchain, that will allow any creator to charge for access to their work. There’s no company standing in the middle, choosing who can monetize or be discovered, and there’s no need to gather any personal data at all.\n\nWhile we’re building this protocol, there’s no need to adopt our code or services to use it. It’s free to integrate it into your websites and products, just as other open standards like HTML or email are, and we don’t take any kind of cut from any transactions. In fact, by design, we can’t. Our aim is to set the standard for services that use the protocol, and kickstart a rich ecosystem of developers, vendors and customers.\n\nWhile you can use our services, [all our code is open source](https://github.com/unlock-protocol/unlock) and free to self-host —which is why today’s release is so important.\n\n## Version 0\n\nToday we’re releasing our proof of concept for a decentralized paywall based on the Unlock Protocol.\n\nThis first release is aimed at technical, blockchain-aware web publishers whose audiences are also already using decentralized apps. Each of these users has probably got [Metamask](https://metamask.io/) installed in their browser. They’re early adopters at the frontier of the decentralized web.\n\n![new lock interface](/static/images/blog/announcingv0/newlock.png)\n\nThese publishers can create a _lock_, and set a price for content that is protected by it, as well as how long customers will have access to it for. Then, using a few lines of code, they can embed an easy-to-use paywall which uses that lock anywhere on the web. Finally, users can buy a _key_ to unlock the lock at the price the publisher set, for the duration publishers allow.\n\n![paywall demo](/static/images/blog/announcingv0/paywalldemo.png)\n\nFor members of their early-adopter audience, all it takes is one click and a confirmation from their cryptocurrency wallet, and they can access the content.\n\nIt’s a lightweight proof-of-concept for the protocol, but it’s also a useful proof-of-concept for publishers. There’s no need to go through an expensive paywall provider: anyone on the web can sell their content without asking anyone else for permission.\n\nOf course, it’s early days. We don’t recommend using this at scale quite yet. And it’s limited to users who are _au fait_ with cryptocurrencies. But we think it’s an exciting first step.\n\n[You can deploy your first lock right here.](https://unlock-protocol.com/) If you decide to embed it on your website or blog, please drop us a line. We would love to learn from you.\n\n(Also, this goes for any decentralized app, but please make sure you withdraw from your lock fairly regularly. Funds are safer when they’re stored in a wallet than sitting on a smart contract.)\n\nYou can purchase a key to a lock on [this test blog post by Julien](https://www.ouvre-boite.com/members/) or [this one by Ben](https://werd.io/2019/testing-the-unlock-paywall--protocolcom). We’ll donate double the proceeds from any tests and send them to [She256](https://www.she256.io/).\n\nThe genie isn’t getting back in the box. [Anyone who reads a newspaper or stays on top of Twitter knows that the prevailing business model of the web _will_ change.](https://medium.com/unlock-protocol/the-end-of-the-ad-supported-web-d4d093fb462f) It’s up to all of us to try and make it one that works for everyone, instead of a small number of gatekeepers. This release is our first step on that path.\n"},{"title":"The End of the Ad-Supported Web","subTitle":"What if we got the business model of the web wrong?","authorName":"Julien Genestoux","publishDate":"December 13, 2018","description":"What if we got the business model of the web wrong?","image":"/static/images/blog/adsupportedweb/1984.jpg","slug":"ad-supported-web","content":"\nFor the last 20 years, every consumer-oriented application, service or content platform used “ads” as its default business model. Like always, the road to hell has been paved with good intentions: we assumed that the mostly innocuous billboards could be transposed to the web… but these banner ads quickly became endless trojan horses into our privacy, feelings and opinions.\n\nOur naive “content-wants-to-be-free” approach failed to account for externalities, including the fact that hostile organizations are influencing us through our media consumption… Using ads to support content creation is not working anymore, whether it is from a purely technical aspect when more and more of the provisioned ads are not being displayed, from an economic standpoint where, outside of a shrinking number of larges platforms, nobody is able to even scrape cents per hour spent staring at ads.\n\n## Technical challenges\n\nDelivering relevant ads has always been the main challenge for ad platforms. As we reaching unparalleled capabilities when it comes to picking the right ad for each user, new technical problems are making even displaying the ads much harder.\n\nAd blockers have been around for a little while, but there is no denying that their impact has been growing vastly in the last couple years. If anything, the constant alerts to disable ad blockers demonstrates that they are having a real impact.\n\n![ad blocker](/static/images/blog/adsupportedweb/adblocker.png)\n_About 30% of web users in the US browse with an ad-blocker._\n\nOn top of the “individual” use of ad-blockers, we’re starting to see institutions enter the arena. The most notorious example is Apple who has started to tighten the use of 3rd party cookies in Safari, as well as opened the gate to ad blocker on their AppStore.\n\nOf course, Apple’s effort can easily be dismissed when confronted with the fact that Apple apparently [sells $12Bn worth of “search users” to Google every year](http://fortune.com/2018/09/29/google-apple-safari-search-engine/). The hypocrisy is of course not limited to Apple, since several ad blockers have been caught [selling user data](https://www.wired.com/2016/03/heres-how-that-adblocker-youre-using-makes-money/), or even **showing their own ads** instead of the ones “picked” by the publishers.\n\nOn that same front, a couple years ago, the innovative French ISP, Free, decided to [block ads by _default_](https://www.fastcompany.com/3004452/french-isp-free-blocks-all-web-advertising) on its latest modem: this move too was motivated by more than just a sudden care of user’s privacy, but it shows how blocking ads is technically easy to implement at large scales.\n\nThe numbers are clear: ad blockers are growing in popularity and they’re also followed by the increasing use of VPN and other privacy-enforcing techniques which are making ads less relevant and effective.\n\nThe ad industry has been one of the most creative when it came to tracking users. For example, did you know that by combining email tracking and banner retargeting, ad networks that you never heard of know your full identity (including your full name and personal information) all across of the web? But the rules of what is possible are now being superseded by the rule of law. Europe’s GDPR has been such as game changer that, 6 months in, several US media sites are still blocking traffic from Europe (and foregoing the corresponding ad revenues), because they understand that they are not compliant. And, as [Robin Berjon](https://twitter.com/robinberjon) puts it, there is still a very real chance that even the largest ad-tech companies might soon be exposed to massive legal action.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Recently, the <a href=\"https://twitter.com/CNIL?ref_src=twsrc%5Etfw\">@CNIL</a> issued a decision regarding the GDPR compliance of an unknown French adtech company named &quot;Vectaury&quot;. It may seem like small fry, but the decision has potential wide-ranging impacts for Google, the IAB framework, and today&#39;s adtech. It&#39;s thread time! 👇</p>&mdash; Robin Berjon (@robinberjon) <a href=\"https://twitter.com/robinberjon/status/1063549722613432320?ref_src=twsrc%5Etfw\">November 16, 2018</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\n## Economic challenges\n\nThe technical challenges exposed above are adding friction for medium, small and indie creators. Smaller websites and applications do not have the resources to block the blockers or, more importantly to implement native forms of ads which cannot easily be blocked.\n\nMany have exposed that both Apple’s ad blocking crusade and Europe’s GDPR are, in fact, [reinforcing the duopoly](https://www.telegraph.co.uk/technology/2018/10/10/google-increases-tracking-web-users-gdpr-privacy-law/). By increasing the cost of compliance, these efforts are excluding organizations who could not amortize them through massive scale. It shows that, once more, “protecting the consumer” is a great way to decrease competition by ejecting smaller players, and empower incumbents.\n\nAt this point, Google and Facebook already [capture more than 90% of the digital ad market growth](https://adexchanger.com/online-advertising/digital-ad-market-soars-to-88-billion-facebook-and-google-contribute-90-of-growth/). Amazon is obviously the elephant in the room here, but the data is clear: anyone else trying to monetize their content with ads will be fighting un uphill battle going forward. Even when they are large enough that they can have direct sales team, platforms like Twitter or Snapchat seem to be struggling to make ads work.\n\nThe most upsetting part of this new landscape is that the companies which control ad revenues are also the ones which control traffic distribution. Ad revenues are realized when ads are matched with visitors… but these days, both ads and visitors are actually coming from the same few giant tech companies: [Google and Facebook represent 75% of external referrers](https://www.parse.ly/resources/data-studies/referrer-dashboard/).\n\nI will not go full MBA on you, but you don’t have to be [Michael Porter](https://en.wikipedia.org/wiki/Michael_Porter) to understand that if your suppliers and buyers are the very same people, your bargaining powers are, at best, limited.\n\n> Clearly, given that [they know everything about us](https://www.businessinsider.com/how-to-find-out-everything-facebook-knows-about-you-2018-3) AND that we also give them [nearly one hour per day](https://www.nytimes.com/2016/05/06/business/facebook-bends-the-rules-of-audience-engagement-to-its-advantage.html), they must be killing it. Right?\n\nBut let’s go one step further and ignore externalities, one last time. Are ads even a good way to capture value? Well, they make $2 per user per month… anti-climactic! So much data, machine learning, and engineering work for a miserable yield. It turns out that people spend as much time on Netflix than on Facebook: [about 50 minutes](https://www.cnbc.com/2018/07/17/netflix-small-portion-of-overall-watch-time-and-competition-is-stiff.html), but Netflix makes $30 per quarter (5 times as much), with virtually no tracking beyond what movies a user has watched (they actually don’t even require your real name apparently, as long as you pay!).\n\nSo, even from a purely economic standpoint, ads are a terrible way to capture value, and of course harder and harder for smaller publishers and creators.\n\n## Essential challenges\n\nNow, as an engineer, I know that we could still find ways around the technical challenges:\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Alt text = Facebook breaks the word &quot;Sponsored&quot; in 4 spans, and adds 4 visually hidden spans with the letter &quot;S&quot;, so that the textContent for this mess is &quot;SpSonSsoSredS&quot; <a href=\"https://t.co/iFMKbOedHT\">https://t.co/iFMKbOedHT</a></p>&mdash; Florens Verschelde (@fvsch) <a href=\"https://twitter.com/fvsch/status/1071522348606595072?ref_src=twsrc%5Etfw\">December 8, 2018</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\nAnd, as an entrepreneur, I know that there are other ways to monetize creation, whether it is content or software that is not ad-based.\n\nBut, as a citizen, I start to question the very premise of what advertisement is all about: _someone else is paying for the stuff that I am consuming_. _**But why? And what does it eventually lead to?**_\n\nThe quick answer is that whoever pays for the stuff we consume has a message to communicate: some product we don’t know about is great, this service just got cheaper, that politician’s economic policies have been disastrous… Like everyone else, these ‘advertisers’ are looking for better returns on their investments and the data is clear: ads tend to work better when they are more (re)targeted. This obviously **leads to privacy invasion** and, eventually, surveillance. Are we really willing to let go of some of our most basic rights for our right to information and knowledge?\n\n> We got duped: we were told we could get free knowledge for a little bit of our attention, but it turns out that despite all the privacy we increasingly give away, the content we get seems to decrease in value.\n\nAdvertisers rightfully want to drive down the unit costs of their ads: who would not try to achieve the same goals at a lower price? But doing so also means that, on the other end of that relationship, the incentive of the publisher becomes to increase the volume of ads they display. As such, in the ad-supported web, the incentive for the creator is to create more content, not better content. All of the metrics that we used, whether it is CPM, cost per click, or performance/conversion eventually all boil down to “how much attention can this content take from consumers”. This started with the “information overload” complaints from 20 years ago and continued with the incessant slideshows, notifications, click bait and eventually fake news: everything that can steal a couple more minutes of the free web users’ time is financially rewarded: **the content itself becomes an excuse for the ads that surround it**.\n\n![1984](/static/images/blog/adsupportedweb/1984.jpg)\n_Image: 1984 by [Lesley Barnes](https://www.lesleybarnes.co.uk/1984-The-Graphic-Canon-3)_\n\nWhat if we got all this wrong? What if instead of volume, we rewarded quality? What if creators were being paid based on the value they create for their consumers, rather than based on the attention they steal from them?\n\n...\n\n**Ads are not viable anymore for most web creation.** They are now becoming less delivered, less relevant, and even less profitable as well as increasingly more detrimental to the whole web ecosystem: when they were the “default” choice for any kind of online monetization, they are sometimes turning into a liability for the websites which display them.\n\nIt is time to remember that if content is free to consume, it must not be very expensive to produce… As a society, we should now understand that if you pay peanuts, you get _monkeys_. Building an ad-supported web was misguided and it is now slowly starting to collapse under its own absurdity. However, we should not rejoice until we have been able to ensure that creators are paid for their work: they alone are changing the status quo and moving our world forward.\n"},{"title":"To Save Freedom of Speech, We Must Decentralize the Web","subTitle":"In a world where corporations control our conversations, removing middlemen is more important than ever.","authorName":"Ben Werdmuller","publishDate":"October 15, 2018","description":"In a world where corporations control our conversations, removing middlemen is more important than ever.","image":"/static/images/blog/freedomofspeech/thisisforeveryone.jpg","slug":"freedom-of-speech","content":"\n![this is for everyone](/static/images/blog/freedomofspeech/thisisforeveryone.jpg)\n\nThe web is in trouble. So what?\n\nFor a generation of hackers and activists, the “open web” was an ideal to work towards: an accessible platform where anyone could publish, regardless of status, identity, or context. It’s hard to remember from our standpoint in 2018, but before the web, we needed to go through centralized organizations like publishers and broadcasters to be heard. If your voice didn’t fit their idea of what should be shared, it wouldn’t be. Curiously, most of the voices that were heard came from people who looked a lot like the gatekeepers themselves.\n\nUnfortunately, despite all its promise, the web revolution fell flat. It turned out that a lot of the people who wanted to remove these gatekeepers actually just wanted to replace them with their own, and make a bunch of money in the process. Rather than maintaining the web’s spirit of openness, the broadcasters and publishers of yesteryear were replaced with technology companies — run, once again, by rich, white men.\n\nWe’re still only at the beginning of understanding the true implications of this shift, but the signs are poor. Policies have been enacted not to protect communities and prioritize user value, but to maximize advertiser value and ensure people look at targeted advertising for longer. Facebook’s “real names” policy has [kicked off transgender users for using their deadnames](https://www.thedailybeast.com/facebooks-pride-rainbows-dont-extend-to-trans-peoples-names), while its advertising-engagement-maximizing feed algorithms provoke [societal divisions](https://nypost.com/2017/02/18/why-facebook-feeds-division-and-stress/) and [even genocide](https://newrepublic.com/article/147486/facebook-genocide-problem). The web’s [original sin](https://www.theatlantic.com/technology/archive/2014/08/advertising-is-the-internets-original-sin/376041/) of relying on targeted advertising has led to real suffering around the world.\n\nAny time a single entity becomes the gatekeeper for discourse, information, art and culture, that entity’s business model and policies will have a disproportionate effect on what gets published and who gets heard around the world. No matter a gatekeeper’s intentions, its existence places tangible limits on freedom of speech.\n\nOne solution is just to make everything on the web free. A lot of people believe it was a mistake to add monetization to the platform in any way. But that ignores a crucial fact: people need to make money. They have to eat; to pay their rent or mortgage; to live. Unfortunately, the need for money is even more present in communities that have been heard the least. There’s no such thing as making something for free: overheads, externalities, and hidden costs affect who can afford to create and broadcast. To give underrepresented people a voice, you need to give them a way to stay afloat.\n\nThe good news is, there’s a better way. The potential of an open, inclusive web has not been lost.\n\nIn open source circles, truly decentralized platforms have always been the holy grail: technologies with network effects that provide real value to users, but aren’t owned by any single entity. It all depends on protocols, which are agreements over how data should flow in order to achieve a particular purpose.\n\nEmail is a protocol. No one company controls it, and you can get email services from more than one company — although in practice most of us only use a handful of services, who then have disproportionate influence over the protocol’s evolution. That’s because protocols are dumb: they’re just descriptions of how data should flow. You need services over the top to provide the functionality that we actually use.\n\nEnter blockchain. Yes, it made its arrival accompanied by volatile, speculative investments into cryptocurrencies — but the underlying technology, which allows anyone to prove that a set of transactions were made in a given order without relying on a central authority or gatekeeper, could power a new generation of decentralized applications. Smart contracts decentralize the logic of those applications in themselves. Suddenly, protocols can be smart.\n\nAmong other things, blockchains give us the ability to add payment without any middleman to any page on the web. When Julien told me his vision for Unlock, that’s what jumped out at me: imagine a one-click “pay here” button, or even an in-person tap-and-pay device, without going through a central bank. Here, every creator gains the right to set their own terms and sell under their own steam, without going through a middleman — which means there’s no need to give a middleman a cut, or capitulate to their rules. In restrictive societies, there’s also no systemic reason to comply with censorship rules. The software you use is no longer an extension of the police, or subject to a single corporation’s policies.\n\nIf it’s easy enough to use, it could change the way commerce is conducted online forever — which, in turn, changes who can be heard forever. Decentralization isn’t just a way to prevent censorship and heal divisions; it’s a way to make money for every creator on the web, wherever they are in the world. Just like the web itself, this is overwhelmingly a force for inclusion and democracy: a place for all humanity to come together, without permission, and without restriction.\n"},{"title":"Unlocking Some Exciting News","subTitle":"We’re growing our talented and mission-driven team. Come join us!","authorName":"Julien Genestoux","publishDate":"July 24, 2018","description":"We’re growing our talented and mission-driven team. Come join us!","slug":"exciting-news","content":"\nAt Unlock, we’re on [a mission to fix the web](/blog/its-time-to-unlock-the-web). Unlock empowers each and every creator in the world and helps them find ways to monetize without relying on a middleman. It’s a protocol — and not a centralized platform that controls everything that happens on it. We want to help value spread more easily not through convoluted user tracking or clickbait. It’s about taking back subscription and access from the domain of middlemen — from a million tiny silos and a handful of gigantic ones — and transforming it into a fundamental business model for the web.\n\nI’ve spent my career building for the open web, whether for Superfeedr (acquired by Medium in 2016) or at Medium where I worked on SEO, syndication protocols and cryptocurrencies, or through the WebSub protocol which I wrote for the W3C.\n\n## 💸 Empowering our team\n\nToday, I am proud to say that Unlock has closed a pre-seed round of funding led by General Catalyst and by Cherry Ventures and with participations from Consensys Ventures, Kindred Ventures, Betaworks, 122 West, La Famiglia, Coinbase Ventures and a group of stellar business angels. It’s an honor to have each of these partners on board and we’re excited to have their expertise as we grow.\n\n## 🤗 Expanding our team\n\nI am also excited to say that Unlock is becoming a “we”: my friend [Ben Werdmuller](https://www.linkedin.com/in/benwerd) is joining Unlock as our first hire. There are very few people who can make such an impact on an early stage company: Ben is a talented engineer with a very rich experience building products and leading open source projects such as Known or Elgg.\n\nThis new funding will also help Ben and I build a world-class team of talented and creative minds to build this new business model for the web. We’d love you to join us: here’s some more detail as to [what we’re looking for](/jobs), currently.\n\n## 👨‍💻 Contributing to our team\n\nFinally, today, we’re opening up our [Github account](https://github.com/unlock-protocol/unlock) which includes all of the code that we have written so far for Unlock. Anyone who’s released open source code knows what this means: the code will be inspected, audited and judged… but it will also be improved and anyone can make suggestions, open issues or even contribute fixes, documentations and more. We’re excited to welcome you to the Unlock community!\n\nWe’re on a mission to fix the web. We’re proud to announce our new investor partners and we believe we have big ideas to take us to the next stage — we’d love you to [join us](/jobs)!\n"},{"title":"Setting Unlock’s demo free","subTitle":"Today we’re sharing the very first demo of the Unlock Protocol.","authorName":"Julien Genestoux","publishDate":"June 10, 2018","description":"Today we’re sharing the very first demo of the Unlock Protocol.","slug":"setting-unlocks-demo-free","content":"\nIdeas are wonderful and beautiful. They can only be perfect, because they do not exist. I am fascinated by artists, authors and creators of all kinds who are able crack open their own skulls to let their ideas, dreams, and nightmares become real and shared with the world.\n\nCreating a product also has some of this. The business plan, slides and pitches are barely more than a raw idea. It’s easy to make a chart which look up and to the right, or describe a world where consumers have been waiting for the product to be launched. But the truth is, it all starts with a draft, a demo, a proof of concept and this first attempt will likely be disappointing for those who bought your grand vision ([including yourself](https://vimeo.com/85040589)).\n\nIn the last couple weeks, I have shown demos of Unlock to a lot of people, with a healthy mix of enthusiasm and anxiety. A couple days ago, I went ahead and decided to record it. In many ways, it is raw and rough, but I also know that it is a required step to slowly, but surely, refine what we’re building [into the world we want](/blog/its-time-to-unlock-the-web).\n\n> Unlock is a protocol which lets creators monetize their content or software. Consumers pay the creators directly in order to unlock words, images, videos or features. Here, I am taking the example of a blogger who may want to limit access to their content only to the people who have purchased a key to their lock.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wktotzmea0E\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n\nMore than anything, we’d love to have your feedback, positive and negative: our opinions are strong but loosely held.\n"},{"title":"It’s Time to Unlock The Web","subTitle":"The web needs a better business model — and we believe the technology is finally here to do it.","authorName":"Julien Genestoux","publishDate":"April 27, 2018","description":"The web needs a better business model — and we believe the technology is finally here to do it.","image":"/static/images/blog/itstimetounlocktheweb/unlocklegacy.jpg","slug":"its-time-to-unlock-the-web","content":"\nIt’s become dangerously clear in the last few years that the business model we thought would support a vibrant, open web just isn’t going to work any more. Driving more and more eyeballs to ads was always considered ethically and morally borderline, but today, monetizing clickbait isn’t just economically fragile: it’s feeding our democracies with more misinformation and fake news.\n\nThe thing is, plenty of publishers and creators have been ahead of the curve on this one, even if we don’t give them much credit for it. They knew that free content can, in fact, be very costly and that **real freedom comes from knowledge that’s expensive to produce**. They understood that when Stewart Brand famously said that [“information wants to be free”](https://en.wikipedia.org/wiki/Information_wants_to_be_free) he meant free as in “speech” (_libre_), not free as in “beer” (_gratis_).\n\nSome publishers, like the New York Times, got a lot of heat when they introduced [their paywall](https://www.nytimes.com/2011/03/18/opinion/l18times.html), but the trend they set isn’t reversing: they now have 3M subscribers and aim for 10M by [2020](https://www.nytimes.com/projects/2020-report/index.html). Hundreds of other news and content organizations are going in the same direction, [including this very platform](https://medium.com/membership).\n\nAnother trend emerged in the last 10 years: ownership does not seem to matter as much as it used to. People are getting rid of their meticulously amassed records and DVD collections to replace them with monthly subscriptions to Spotify and Netflix. Ride sharing platforms have put yet another dent in the car ownership status symbol… etc. **My generation is putting access above ownership.**\n\n## The Impossible Dilemma\n\nAnd yet getting people to subscribe or join a cause is still just as hard as ever. Many publishers are going at it alone, building their own systems at great expense so that they can stay independent and in control of their decisions, even if it adds friction and create balkanization on the consumer’s side, leading to lower conversion rates.\n\nOn the other end, ad supported networks have the ability to leverage the whole web for tracking in order to improve their targeting and since they reward page views, Google and Facebook have slowly but surely captured attention and distribution: they now control both supply and demand.\n\nSome creators lean on gatekeepers like Netflix or Spotify or Patreon, who take payments direct from users and then redistribute them back to creators. Apple, Google or Amazon have also identified the opportunity to become the payment layer of the web and are starting to court publications. But if you’re a creator, why would you rely on a tech company that will change its rules, again? Or one that will censor content for unclear reasons? Or one that could limit distribution to the highest bidders only?\n\nSurely there must be another way?\n\n## Yes, there’s another way.\n\nWhen I started my last company, [Superfeedr](https://superfeedr.com/), I wanted to solve a different problem that creators were having online. We were looking for a different way to help information spread around the web more quickly, and so we built a way for anyone to take their feeds of information, standardize them — building on RSS, one of the pillars of the open web — and push that information around the web with the PubSubHubbub protocol (or [WebSub](https://www.w3.org/TR/websub/), its successor).\n\nThat combination of things wasn’t an accident: I’ve been an open web nerd for ever, and the idea of a world wide network with no gatekeeper has always felt like the future… the future of knowledge, of information, of social interactions. And, obviously, that’s a future worth fighting for.\n\nBut distributing information quickly wasn’t enough. Over time, I saw the silos emerging, and the tension between creators, platforms, and users building into full-scale battle. It became clear that [things would never work](https://medium.com/ouvre-boite/take-my-money-290bea3532ba) if the systems weren’t in sync with the needs of consumers and creators. **The lack of clear business model directly led to centralization of data and power in the hands of a few silos.**\n\nNow, I think the technology exists to make those systems. So that’s what I’m working on. **It’s called [Unlock](https://unlock-protocol.com/).**\n\nUnlock is meant to help creators find ways to monetize without relying on a middleman. It’s a protocol — and not a centralized platform that controls everything that happens on it. This time, though, it’s not about helping information spread faster, it’s about helping value spread more easily. It’s about taking back subscription and access from the domain of middlemen — from a million tiny silos and a handful of gigantic ones — and transforming it into a fundamental business model for the web.\n\n![unlock original logo](/static/images/blog/itstimetounlocktheweb/unlocklegacy.jpg)\n\n## Here’s how it works.\n\n**For creators**, Unlock provides simplicity. Unlock gives them a JavaScript snippet which lets creators embed locks on their own websites that restrict access to people who have the right key. A lock is just an “access control list”: the list of consumers who are allowed to access their creation (because they own a key). It makes adding a membership layer to your website, or even to a single article, just as easy as embedding an ad.\n\n**For users**, Unlock provides consistency. Up until now, subscriptions have been totally chaotic, with hundreds of different approaches, requiring you to keep a collection of accounts — and passwords! — to access all the things you care about. There’s no intelligent way to connect them together, unless you’re the platform that controls the network. The blockchain allows Unlock and creators to know only who has access to what, and nothing more.\n\nYes, I said it: **the blockchain**. _And I hear the eyes roll._\n\nIt’s true that the blockchain is a huge thing that most people don’t really understand, except that they know some people say it’s meant to fix everything. And it’s true that most crypto projects are confusing or underwhelming or over-the-top.\n\nBut Unlock isn’t whimsical or unwanted; it’s very practical, very simple, and very tangible. We’re using the technologies at our fingertips to help solve a real problem which is undermining the world around us, in a fully decentralized way.\n\nI think Unlock will change how content is accessed and paid for, and build a much healthier ecosystem for everyone. It has the potential to become the way people access restricted content on the web, in the same way that the web browser eventually became the way people consumed most content on the web.\n\n## What does it enable?\n\nBecause Locks are the “nodes” in the Unlock network, sharing the same code and the same API, they can become a layer on which services can be built — services to perform discovery, recommendations, syndication, and even to build secondary memberships markets.\n\nAnd what about the network effects that those gatekeeper platforms — the Netflixes, the Spotifys, the Googles, the Facebooks — use to create growth and guarantee attention? That’s achievable too. The protocol is, at its core, **a web-centric protocol that will encourage and reward referrals**. So once a user has unlocked something, the protocol can tell if she shared those links and whether that sharing results in other people getting keys to the same lock. As a reward, the protocol will grant her discount tokens so she can access more content at discounted prices.\n\nThis creates a strong network effect where the users who have unlocked content are incentivized to share the best content and convince new users to join the network. That’s good for creators, and good for consumers.\n\n_Can you tell I’m excited?_\n\n## Actually, here’s _really_ how it works\n\n(Feel free to skip this technical section if this bit doesn’t matter to you.)\n\n**Creators deploy smart contracts** (which we call locks) that keep track of who has access to their work. Each creator, and only them, fully owns their locks. They also control these locks: the price, scope, expiration of keys and other terms are set by the creators themselves. They can set up site-wide locks, build shared (bundled) locks with other creators, make distinct locks for each piece of content (micro-payments) or even make locks which don’t represent access to content at all — perhaps just “status” or features.\n\n**Unlock provides a JavaScript snippet** which lets creators embed the locks on their own websites to restrict access to people who have the right key. It makes adding a subscription layer to your website as easy as embedding an advert.\n\n**For users, nothing really looks different** from today. They sign up to access a piece of content, get a key to the things they want through native crypto currencies such as Eth (since we’re building on ethereum). Transactions happen then on the blockchain between the consumers and the creator. There are no middlemen.\n\n**Keys are [non fungible tokens](https://hackernoon.com/non-fungible-tokens-5ba83906b275)**; once they have been assigned, nobody can take them back. Because keys are stored on the blockchain, they don’t require users to use a specific single point of failure in order to gain access or show that they previously did: **keys to locks can be easily used on any application or connected device**. Finally, since the keys are crypto assets, users could also trade them (when applicable) or use them to signal that they belong to a community of supporters.\n\nThe Unlock Discount Tokens (Ʉ) are managed by another smart contract which rewards curators and referrers, as well as grant discounts upon purchases. This smart contract is also decentralized, through its ownership and **governance**: each discount token owner can vote on who is the “maintainer” of the Unlock Discount smart contract.\n\n## OK, so what happens now?\n\nUnlock is the next phase in my career, but it’s also the next leg of a fascinating journey which started 30 years ago, when the web was born. We are building on the work of many people who came before us — people who may not have predicted the web that we see today, but did understand the value of decentralization. We also have a clear understanding of the web’s current state: **true decentralization cannot be achieved if economic incentives are not aligned between consumers and creators**.\n\nWe’re just starting, and I need your help. We’re hiring a small, diverse and multi-disciplinary team: if you know someone we should hire, send them my way!\n\nIf you want to stay in touch, [please leave your email address](https://unlock-protocol.com/). We promise to never share your contact information, or send you unwanted messages.\n"}]}